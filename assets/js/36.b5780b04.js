(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{402:function(t,e,n){"use strict";n.r(e);var r=n(44),a=Object(r.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"滑动窗口"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#滑动窗口"}},[t._v("#")]),t._v(" 滑动窗口")]),t._v(" "),n("h2",{attrs:{id:"_1-基本思路"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-基本思路"}},[t._v("#")]),t._v(" 1. 基本思路")]),t._v(" "),n("p",[t._v("滑动窗口算是一种进阶版的双指针方法。适用的前提条件是最终解在集合/数组中是连续的。")]),t._v(" "),n("p",[t._v("首先初始化左右两个指针 "),n("code",[t._v("left")]),t._v("/"),n("code",[t._v("right")]),t._v("，然后使用嵌套两层循环，外层循环处理每次的结果并让 "),n("code",[t._v("right")]),t._v(" 向右移动，内层循环向右移动 "),n("code",[t._v("left")]),t._v(" 来保证"),n("code",[t._v("窗口")]),t._v("内的区间满足目标条件。")]),t._v(" "),n("h2",{attrs:{id:"_2-伪代码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-伪代码"}},[t._v("#")]),t._v(" 2. 伪代码")]),t._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("int left = 0;\nint right = 1;\nint total = ...;          // 初始化 total\nwhile(right < length){\n  计算当前 total 值;\n  while(total 不符合目标){\n    更新 total 值；\n    left ++;\n  }\n  依据 total 值做相应的计算/判断;\n  right ++;\n}\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br")])]),n("h2",{attrs:{id:"_3-习题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-习题"}},[t._v("#")]),t._v(" 3. 习题")]),t._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/",target:"_blank",rel:"noopener noreferrer"}},[t._v("3. 无重复字符的最长子串"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://leetcode-cn.com/problems/find-all-anagrams-in-a-string/",target:"_blank",rel:"noopener noreferrer"}},[t._v("438. 找到字符串中所有字母异位词"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://leetcode-cn.com/problems/permutation-in-string/",target:"_blank",rel:"noopener noreferrer"}},[t._v("567. 字符串的排列"),n("OutboundLink")],1),t._v(".")]),t._v(" "),n("li",[n("a",{attrs:{href:"https://leetcode-cn.com/problems/minimum-window-substring/",target:"_blank",rel:"noopener noreferrer"}},[t._v("76. 最小覆盖子串"),n("OutboundLink")],1)])])])}),[],!1,null,null,null);e.default=a.exports}}]);