(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{445:function(s,a,t){"use strict";t.r(a);var n=t(44),e=Object(n.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"mapstruct"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mapstruct"}},[s._v("#")]),s._v(" MapStruct")]),s._v(" "),t("p",[s._v("MapStruct 是一个自动生成 bean mapper 类的代码生成器。")]),s._v(" "),t("p",[s._v("开源地址："),t("a",{attrs:{href:"https://github.com/mapstruct/mapstruct",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://github.com/mapstruct/mapstruct"),t("OutboundLink")],1)]),s._v(" "),t("p",[s._v("官方指导文档十分详细，这里只描述一下实际使用遇到的小问题和需要注意的细节。")]),s._v(" "),t("h2",{attrs:{id:"_1-环境配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-环境配置"}},[s._v("#")]),s._v(" 1. 环境配置")]),s._v(" "),t("p",[s._v("由于 MapStruct 的原理是根据注解和接口/抽象类自动生成实现类代码，所以需要在编译时添加额外的编译插件才能生成代码。比如在 maven 中需要在 "),t("build",[s._v(" 标签里添加mapstruct-processor插件：")])],1),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("  <build>\n    <plugins>\n        <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-compiler-plugin</artifactId>\n            <version>3.8.1</version>\n            <configuration>\n                <source>1.8</source>\n                <target>1.8</target>\n                <annotationProcessorPaths>\n                    <path>\n                        <groupId>org.mapstruct</groupId>\n                        <artifactId>mapstruct-processor</artifactId>\n                        <version>${org.mapstruct.version}</version>\n                    </path>\n                </annotationProcessorPaths>\n            </configuration>\n        </plugin>\n    </plugins>\n</build>\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br")])]),t("h2",{attrs:{id:"_2-expression-写-java-代码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-expression-写-java-代码"}},[s._v("#")]),s._v(" 2. expression 写 java 代码")]),s._v(" "),t("p",[s._v("这里有一个小坑，如果 "),t("code",[s._v("expression")]),s._v(" 返回的是一个已经映射过的对象类型时，mapstruct 不会自动生成对应的映射代码，需要在 "),t("code",[s._v("expression")]),s._v(" 的表达式里写全整个转换过程代码。")]),s._v(" "),t("p",[s._v("比如：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('@Mapper(uses = ActivityMapper.class)\npublic interface ActionMapper{\n    @Mapping(target = "activity", expression = "java(someThing.getActivityOther()")\n    Action toAction(SomeThing someThing)\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("本来是想通过 "),t("code",[s._v("getActivityOther()")]),s._v(" 返回的对象通过 "),t("code",[s._v("ActivityMapper")]),s._v(" 和 "),t("code",[s._v("Activity")]),s._v(" 进行自动映射，但是实际 mapstruct 还不能识别这样的场景，需要手动把表达式写全，即：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('@Mapper(uses = ActivityMapper.class)\npublic interface ActionMapper{\n    @Mapping(target = "activity", expression = "java(ActivityMapper.INSTANCE.toActivity(someThing.getActivityOther())")\n    Action toAction(SomeThing someThing)\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("h2",{attrs:{id:"_3-映射方法的返回值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-映射方法的返回值"}},[s._v("#")]),s._v(" 3. 映射方法的返回值")]),s._v(" "),t("p",[s._v("查看生成的映射代码，实际返回的目标实例都是 new 出来的，所以返回类型必须为实现类，而不能为 "),t("code",[s._v("Interface")]),s._v(" 或者 抽象类。")]),s._v(" "),t("p",[s._v("如果一定要返回抽象类或者接口，需要额外写一个工厂方法类用于创建对象，可以参见官方文档的 "),t("code",[s._v("Object factories")]),s._v(" 部分。")]),s._v(" "),t("h2",{attrs:{id:"_4-编译错误排查"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-编译错误排查"}},[s._v("#")]),s._v(" 4. 编译错误排查")]),s._v(" "),t("ul",[t("li",[s._v("在当前类中报的编译错误不一定是当前类的映射错误\n"),t("ul",[t("li",[s._v("可能来自 "),t("code",[s._v("@Mapper")]),s._v(" 注解中的 "),t("code",[s._v("uses")]),s._v(" 中的引用的 "),t("code",[s._v("Mapper")]),s._v("。")]),s._v(" "),t("li",[s._v("可能是装饰类中覆盖了某些方法导致的。")])])])])])}),[],!1,null,null,null);a.default=e.exports}}]);