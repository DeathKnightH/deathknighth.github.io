(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{424:function(t,e,a){"use strict";a.r(e);var s=a(44),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"注解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注解"}},[t._v("#")]),t._v(" 注解")]),t._v(" "),a("h2",{attrs:{id:"_1-原来的注解有什么问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-原来的注解有什么问题"}},[t._v("#")]),t._v(" 1. 原来的注解有什么问题？")]),t._v(" "),a("p",[t._v("自 java 1.5 加入注解以来，解决了很多问题，最著名的就 junit 和 spring 使用注解作为复杂配置的解决方案。")]),t._v(" "),a("p",[t._v("但是 Java 8 之前的注解还有一些难用的地方：")]),t._v(" "),a("ul",[a("li",[t._v("只能在声明的地方使用注解，在类声明/方法声明/属性声明的地方用，还不够灵活")]),t._v(" "),a("li",[t._v("重复注解，只能使用另一个注解封装重复注解的形式，使用起来不方便")])]),t._v(" "),a("p",[t._v("Java 8 解决了这些问题。")]),t._v(" "),a("h2",{attrs:{id:"_2-类型注解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-类型注解"}},[t._v("#")]),t._v(" 2. 类型注解")]),t._v(" "),a("p",[t._v("这种可以用在任何地方的注解叫做类型注解(Type Annotations)，类型注解是一种语法而不是语义，说白了不会影响编译。")]),t._v(" "),a("p",[t._v("类型注解主要作用在于配合检查 checker-framework 工具能实现编译时检查一些运行时异常，比如以下错误只会在运行时抛出，是可以正常编译通过的：")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('Collections.emptyList().add("One");   // 运行时报 UnsupportedOperationException\nint i=Integer.parseInt("hello");      // 运行时报 NumberFormatException\nSystem.console().readLine();          // 运行时报 NullPointerException\n\n')])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])])])}),[],!1,null,null,null);e.default=n.exports}}]);