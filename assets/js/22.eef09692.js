(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{371:function(t,a,_){t.exports=_.p+"assets/img/composite.drawio.216eaf6c.png"},450:function(t,a,_){"use strict";_.r(a);var s=_(44),r=Object(s.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"组合模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#组合模式"}},[t._v("#")]),t._v(" 组合模式")]),t._v(" "),s("h2",{attrs:{id:"_1-概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-概念"}},[t._v("#")]),t._v(" 1. 概念")]),t._v(" "),s("p",[t._v("Composite，又称对象树、Object Tree。从别名可以看出此模式将对象组合成树状结构，让用户能以相同的方式使用单独对象和组合对象。")]),t._v(" "),s("h2",{attrs:{id:"_2-意图"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-意图"}},[t._v("#")]),t._v(" 2.意图")]),t._v(" "),s("p",[t._v("用一个共同的接口描述小的组件和大的组合对象所有的共同操作，大的组合对象通过将工作委派给子元素，自己只处理中间结果，保证整体和个体的操作统一。也让调用方省去了逐个遍历小组件进行操作。")]),t._v(" "),s("h2",{attrs:{id:"_3-类图示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-类图示例"}},[t._v("#")]),t._v(" 3.类图示例")]),t._v(" "),s("p",[s("img",{attrs:{src:_(371),alt:"composite"}})]),t._v(" "),s("h2",{attrs:{id:"_4-适用场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-适用场景"}},[t._v("#")]),t._v(" 4.适用场景")]),t._v(" "),s("h3",{attrs:{id:"_4-1-实际业务场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-实际业务场景"}},[t._v("#")]),t._v(" 4.1 实际业务场景")]),t._v(" "),s("ul",[s("li",[t._v("如果需要描述一组复杂的嵌套树状结构对象，可以使用组合模式")]),t._v(" "),s("li",[t._v("如果对象的组合和单个子组件行为相同，而调用方又可以同时调用子组件和复杂对象，那也可以使用组合模式。\n"),s("ul",[s("li",[t._v("组合计费，一个大的收费项目由多个单独的收费项和小的收费项目组合，每种收费组合还有自己的计算方式，可以采用组合模式，")])])])]),t._v(" "),s("h3",{attrs:{id:"_4-2-开源实例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-开源实例"}},[t._v("#")]),t._v(" 4.2 开源实例")]),t._v(" "),s("ul",[s("li",[t._v("java.util.List#addAll(Collection)")])]),t._v(" "),s("h2",{attrs:{id:"_5-实现细节和技巧"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-实现细节和技巧"}},[t._v("#")]),t._v(" 5.实现细节和技巧")]),t._v(" "),s("ul",[s("li",[t._v("要适用组合模式，需保证核心模型能以树状结构表示，即每个容器(中间结点)可以包含其他的容器(中间结点)和单个对象(叶子结点)。")]),t._v(" "),s("li",[t._v("容器和单个对象要有部分共同的接口，否则强行用组合会增加额外的使用负担。")]),t._v(" "),s("li",[t._v("实现共同接口时注意容器的实现通常是调用容器内部子元素或者子容器的相应实现的。")])]),t._v(" "),s("h2",{attrs:{id:"_6-优缺点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-优缺点"}},[t._v("#")]),t._v(" 6.优缺点")]),t._v(" "),s("p",[t._v("优点：")]),t._v(" "),s("ul",[s("li",[t._v("符合开闭原则。")]),t._v(" "),s("li",[t._v("利用了多态和递归，可以方便地使用整个树或者部分树。")])]),t._v(" "),s("p",[t._v("缺点：")]),t._v(" "),s("ul",[s("li",[t._v("如果有些个体对象和公共接口有较大差别时可能会破坏一定的接口隔离原则。")])]),t._v(" "),s("h2",{attrs:{id:"_7-与其他设计模式的关系"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-与其他设计模式的关系"}},[t._v("#")]),t._v(" 7.与其他设计模式的关系")])])}),[],!1,null,null,null);a.default=r.exports}}]);