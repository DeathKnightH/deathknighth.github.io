(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{362:function(t,r,a){t.exports=a.p+"assets/img/abstractfactory.drawio.4f7720eb.png"},426:function(t,r,a){"use strict";a.r(r);var s=a(44),e=Object(s.a)({},(function(){var t=this,r=t.$createElement,s=t._self._c||r;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"抽象工厂"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#抽象工厂"}},[t._v("#")]),t._v(" 抽象工厂")]),t._v(" "),s("h2",{attrs:{id:"_1-概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-概念"}},[t._v("#")]),t._v(" 1. 概念")]),t._v(" "),s("p",[s("code",[t._v("Abstract Factory")]),t._v(" 是一种"),s("code",[t._v("创建型模式")]),t._v("，用来创建一系列相关的对象。")]),t._v(" "),s("h2",{attrs:{id:"_2-意图"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-意图"}},[t._v("#")]),t._v(" 2. 意图")]),t._v(" "),s("p",[t._v("提供一个接口/抽象类，用于创建一组互相有关联的对象家族（多个对象）。")]),t._v(" "),s("h2",{attrs:{id:"_3-类图示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-类图示例"}},[t._v("#")]),t._v(" 3. 类图示例")]),t._v(" "),s("p",[s("img",{attrs:{src:a(362),alt:"abstractfactory"}})]),t._v(" "),s("p",[t._v("如图：")]),t._v(" "),s("ul",[s("li",[t._v("Client：业务逻辑实现的代指，使用 AbstractFactory 创建需要的一系列对象。")]),t._v(" "),s("li",[t._v("AbstractFactory：抽象工厂本身真的是一个抽象类/接口，一般不负责具体的业务逻辑，只提供一系列抽象对象的创建接口。")]),t._v(" "),s("li",[t._v("ProductA/ProductB：抽象产品，是构成一系列产品的一组不同但相关（这里相关可以简单理解为一系列，比如椅子和沙发同属家具这一系列）的产品声明接口。")]),t._v(" "),s("li",[t._v("ConcreteFactory1/ConcreteFactory2：创建具体产品对象的工厂实现类，但是返回的类型必须是"),s("strong",[t._v("抽象")]),t._v("产品，这样才能实现具体产品类型和业务逻辑的解耦。")]),t._v(" "),s("li",[t._v("ConcreteProductA1/ConcreteProductA2/ConcreteProductB1/ConcreteProductB2：具体产品，图中同一个序号的产品属于同一系列，分为了两个系列的产品组，ConcreteFactory1 负责生产 1 系列产品， ConcreteFactory2 负责生产 2 系列产品。")])]),t._v(" "),s("h2",{attrs:{id:"_4-应用场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-应用场景"}},[t._v("#")]),t._v(" 4. 应用场景")]),t._v(" "),s("ul",[s("li",[t._v("代码需要与多个不同体系的产品进行交互，比如要用同一组通信协议对接不同的运营商实现。")]),t._v(" "),s("li",[t._v("代码中有基于一组工厂方法的类，又包含一些业务逻辑操作，可以把这些工厂方法抽取到独立的抽象工厂类中去。")])]),t._v(" "),s("h2",{attrs:{id:"_5-几个名字带-工厂-的创建型模式对比"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-几个名字带-工厂-的创建型模式对比"}},[t._v("#")]),t._v(" 5. 几个名字带“工厂”的创建型模式对比")]),t._v(" "),s("h3",{attrs:{id:"_5-1-和其他-工厂-对比"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-和其他-工厂-对比"}},[t._v("#")]),t._v(" 5.1 和其他“工厂”对比")]),t._v(" "),s("p",[s("RouterLink",{attrs:{to:"/design/design_patterns/几种“工厂”之间的区别.html"}},[t._v("几个名字带“工厂”的创建型模式对比")])],1)])}),[],!1,null,null,null);r.default=e.exports}}]);