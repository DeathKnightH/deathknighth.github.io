(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{407:function(e,a,s){"use strict";s.r(a);var t=s(44),n=Object(t.a)({},(function(){var e=this,a=e.$createElement,s=e._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"spring-bean"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring-bean"}},[e._v("#")]),e._v(" Spring Bean")]),e._v(" "),s("h2",{attrs:{id:"_1-怎么配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-怎么配置"}},[e._v("#")]),e._v(" 1. 怎么配置")]),e._v(" "),s("p",[e._v("3种方式：")]),e._v(" "),s("ul",[s("li",[e._v("xml 配置")]),e._v(" "),s("li",[e._v("注解配置")]),e._v(" "),s("li",[e._v("java 配置类")])]),e._v(" "),s("h2",{attrs:{id:"_2-作用域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-作用域"}},[e._v("#")]),e._v(" 2. 作用域")]),e._v(" "),s("p",[e._v("bean 在声明时默认是单例模式的，即整个应用上下文中只有一个实例。实际 bean 的作用域可以在配置时一起声明：")]),e._v(" "),s("ul",[s("li",[e._v("singleton：单例，默认就是这个。")]),e._v(" "),s("li",[e._v("prototype：每次调用都是一个新的实例。")]),e._v(" "),s("li",[e._v("request：HTTP 的每次 Request 请求都会创建一个，仅在当前的 Request 中有效。")]),e._v(" "),s("li",[e._v("session：每一个来自新 session 的 HTTP 请求都会创建一个，仅在当前 session 中有效。")])]),e._v(" "),s("p",[e._v("使用 xml 配置 bean 时配置作用域，写在 "),s("code",[e._v("scope")]),e._v(" 属性中：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('<bean id="..." class="..." scope="prototype"></bean>\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("使用注解配置 bean 时配置作用域，可以使用 "),s("code",[e._v("@Scope")]),e._v(" 注解：\n@Bean\n@Scope(value = ConfigurableBeanFactory.SCOPE_PROTOTYPE)\npublic Person personPrototype() {\nreturn new Person();\n}")]),e._v(" "),s("h2",{attrs:{id:"_3-生命周期"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-生命周期"}},[e._v("#")]),e._v(" 3. 生命周期")]),e._v(" "),s("p",[e._v("这部分只针对 "),s("code",[e._v("singleton")]),e._v(" 作用域的 bean，其他作用域 spring 只负责创建 bean。")]),e._v(" "),s("p",[e._v("以这个经典的生命周期图为主线描述：\n"),s("img",{attrs:{src:"https://user-images.githubusercontent.com/19852729/143600298-4d3491aa-8641-4a44-8bf6-9be4fbc9215a.png",alt:"image"}})]),e._v(" "),s("h2",{attrs:{id:"_4-单例-bean-的线程安全问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-单例-bean-的线程安全问题"}},[e._v("#")]),e._v(" 4. 单例 bean 的线程安全问题")]),e._v(" "),s("p",[e._v("因为 bean 在 IOC 中默认是全局单例的，在多线程应用中会有线程安全问题。一般开发中会采用如下方法解决：")]),e._v(" "),s("ul",[s("li",[e._v("使用单例 bean 时尽量保证无状态（即不声明实例变量）。")]),e._v(" "),s("li",[e._v("一定要使用实例变量尽量放在 ThreadLocal 中。")]),e._v(" "),s("li",[e._v("需要使用多线程的功能尽量自己在代码中 new 对象，自己管理生命周期和共享数据。")])])])}),[],!1,null,null,null);a.default=n.exports}}]);