(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{416:function(n,s,a){"use strict";a.r(s);var t=a(44),e=Object(t.a)({},(function(){var n=this,s=n.$createElement,a=n._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h1",{attrs:{id:"并查集"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#并查集"}},[n._v("#")]),n._v(" 并查集")]),n._v(" "),a("p",[n._v("Union Find 常用于动态处理"),a("strong",[n._v("不相交")]),n._v("集合的查询与合并，也就是动态连通性问题。典型应用是最小生成树算法。")]),n._v(" "),a("p",[n._v("不相交：意思是多个集合/元素互不关联，典型的例子是图中不连通的点。")]),n._v(" "),a("p",[n._v("Union Find 就是给不连通的点连通成一个图。")]),n._v(" "),a("h2",{attrs:{id:"_1-基本思路"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-基本思路"}},[n._v("#")]),n._v(" 1. 基本思路")]),n._v(" "),a("p",[n._v("并查集的核心思路是实现两个 API ：")]),n._v(" "),a("ul",[a("li",[n._v("connected(x, y)   查找 "),a("code",[n._v("x")]),n._v(" 和 "),a("code",[n._v("y")]),n._v(" 是否连通")]),n._v(" "),a("li",[n._v("union(x, y)       将 "),a("code",[n._v("x")]),n._v(" 和 "),a("code",[n._v("y")]),n._v(" 连通起来")])]),n._v(" "),a("h2",{attrs:{id:"_2-伪代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-伪代码"}},[n._v("#")]),n._v(" 2. 伪代码")]),n._v(" "),a("p",[n._v("基本实现")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("// parent[x] 就是 x 的父节点\nT[] parentArray;\n\n// 连通分量\ncount;\n\n// 构造并查集，初始情况下每个元素的父节点就是自己\nconstructor(n){\n  count = n;\n  for i in n\n    parent[i] = i;\n}\n\n// 查询 x 所属的根节点\nfind(x){\n  T p = parent[x];\n  while(p != parent[p]){\n    p = parent[p];\n  }\n  return p;\n}\n\n// 连通 x 和 y\nunion(x, y){\n  T xp = find(x);\n  T yp = find(y);\n  if(xp != yp){\n    parent[xp] = yp;\n  }\n  count --;\n}\n\n// 判断是否连通\nconnected(x, y){\n  return find(x) == find(y);\n}\n\n// 查询当前连通分量\ncount(){\n  return count;\n}\n\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br"),a("span",{staticClass:"line-number"},[n._v("35")]),a("br"),a("span",{staticClass:"line-number"},[n._v("36")]),a("br"),a("span",{staticClass:"line-number"},[n._v("37")]),a("br"),a("span",{staticClass:"line-number"},[n._v("38")]),a("br"),a("span",{staticClass:"line-number"},[n._v("39")]),a("br"),a("span",{staticClass:"line-number"},[n._v("40")]),a("br"),a("span",{staticClass:"line-number"},[n._v("41")]),a("br"),a("span",{staticClass:"line-number"},[n._v("42")]),a("br")])]),a("p",[n._v("优化结构，修改 "),a("code",[n._v("find(x)")]),n._v(" 使每次查找时自动进行路径压缩，把树的高度全部变为常数（2）：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("...\n// 查询 x 所属的根节点\nfind(x){\n  if(x != parent[x]){\n    parent[x] = find(x);\n  }\n  return parent[x];\n}\n...\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br")])]),a("h2",{attrs:{id:"_3-习题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-习题"}},[n._v("#")]),n._v(" 3. 习题")])])}),[],!1,null,null,null);s.default=e.exports}}]);