(window.webpackJsonp=window.webpackJsonp||[]).push([[76],{449:function(t,a,s){"use strict";s.r(a);var r=s(44),_=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"虚拟机字节码执行引擎"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#虚拟机字节码执行引擎"}},[t._v("#")]),t._v(" 虚拟机字节码执行引擎")]),t._v(" "),s("h2",{attrs:{id:"_1-概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-概念"}},[t._v("#")]),t._v(" 1. 概念")]),t._v(" "),s("p",[t._v("字节码执行引擎是JVM 最核心的部分之一，虚拟机规范中制定了虚拟机字节码执行引擎的概念模型，保证了不同实现的执行引擎外观（Facade）是一致的，即输入的是字节码文件，处理过程是字节码解析的等效过程，输出的是执行结果。")]),t._v(" "),s("p",[t._v("但是具体的执行引擎实现可能会有很大的不同，有的是解释执行，有的是编译执行（通过即时编译器产生本地代码再执行），有的则是两者都有。")]),t._v(" "),s("h2",{attrs:{id:"_2-运行时栈帧结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-运行时栈帧结构"}},[t._v("#")]),t._v(" 2. 运行时栈帧结构")]),t._v(" "),s("p",[t._v("前面分析 JVM 内存结构的时候提到过在虚拟机运行时数据区中有一个线程私有的部分：虚拟机栈。")]),t._v(" "),s("p",[t._v("栈帧就是虚拟机栈中的栈元素。")]),t._v(" "),s("h2",{attrs:{id:"_3-执行逻辑"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-执行逻辑"}},[t._v("#")]),t._v(" 3. 执行逻辑")]),t._v(" "),s("h3",{attrs:{id:"_3-1-方法调用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-方法调用"}},[t._v("#")]),t._v(" 3.1 方法调用")]),t._v(" "),s("h3",{attrs:{id:"_3-2-字节码执行"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-字节码执行"}},[t._v("#")]),t._v(" 3.2 字节码执行")])])}),[],!1,null,null,null);a.default=_.exports}}]);