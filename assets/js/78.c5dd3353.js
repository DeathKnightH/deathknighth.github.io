(window.webpackJsonp=window.webpackJsonp||[]).push([[78],{439:function(a,s,t){"use strict";t.r(s);var e=t(44),r=Object(e.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"类型推断"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类型推断"}},[a._v("#")]),a._v(" 类型推断")]),a._v(" "),t("h2",{attrs:{id:"_1-泛型的缺点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-泛型的缺点"}},[a._v("#")]),a._v(" 1. 泛型的缺点")]),a._v(" "),t("p",[a._v("Java 从 1.5 开始引入泛型，本质是参数化类型，可以减少类型强转的操作，也能支持类似模板类的写法，例如 jdk 中的集合类。")]),a._v(" "),t("p",[a._v("但是泛型一直有个缺点，每次声明时必须明确写全泛型的类型，比如声明一个 Map：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("Map<String, String> map = new HashMap<String, String>();\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[a._v("这样写不仅有冗余代码，而且有时候泛型声明太多还需要仔细分析才能写对后续代码中的泛型类型，比较费神。")]),a._v(" "),t("h2",{attrs:{id:"_2-持续改进"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-持续改进"}},[a._v("#")]),a._v(" 2. 持续改进")]),a._v(" "),t("h3",{attrs:{id:"_2-1-java-7"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-java-7"}},[a._v("#")]),a._v(" 2.1 Java 7")]),a._v(" "),t("p",[a._v("构造器的参数化类型被显式声明时可以进行类型推断，例如：\nJava 7 之前的写法")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("Map<String, String> map = new HashMap<String, String>();\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[a._v("Java 7 及之后的写法：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("Map<String, String> map = new HashMap<>();\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[a._v("但是还是有一个问题，类型推断在上下文中不生效，比如以下语句在 Java 7 中无法编译通过：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('List<String> list = new ArrayList<>();\nlist.add("A");// 由于addAll期望获得Collection<? extends String>类型的参数，因此下面的语句无法通过\nlist.addAll(new ArrayList<>());\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br")])]),t("h3",{attrs:{id:"_2-2-java-8"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-java-8"}},[a._v("#")]),a._v(" 2.2 Java 8")]),a._v(" "),t("p",[a._v("进一步优化了类型推断，现在支持上下文中的类型推断。")])])}),[],!1,null,null,null);s.default=r.exports}}]);