(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{380:function(e,t,r){"use strict";r.r(t);var a=r(44),s=Object(a.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"回溯算法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#回溯算法"}},[e._v("#")]),e._v(" 回溯算法")]),e._v(" "),r("p",[e._v("回溯算法是基于 DFS 的一种"),r("strong",[e._v("穷举")]),e._v("算法，DFS 一般在搜索到 target 后返回，而回溯算法会遍历所有元素。")]),e._v(" "),r("h2",{attrs:{id:"_1-基本思路"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-基本思路"}},[e._v("#")]),e._v(" 1. 基本思路")]),e._v(" "),r("p",[e._v("核心思路是内嵌在循环中的递归调用，其实这也是 "),r("code",[e._v("n叉树")]),e._v(" 遍历的核心思路。主要需要关注一下几个点：")]),e._v(" "),r("ul",[r("li",[e._v("退出条件 满足目标或者已经无法继续遍历的条件。")]),e._v(" "),r("li",[e._v("路径 一条符合退出条件的决策树路径。")]),e._v(" "),r("li",[e._v("当前选择集合 当前层能够选择的元素集合。")])]),e._v(" "),r("h2",{attrs:{id:"_2-伪代码"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-伪代码"}},[e._v("#")]),e._v(" 2. 伪代码")]),e._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("public void backTrace(int[] set, LinkedList trace， 结果集){\n if(达到退出条件){\n   将 trace 添加到结果集;\n   return;\n }\n for(int temp : set){\n   trace.addLast(temp);             // 选择当前元素\n   backTrace(set, trace, 结果集);    // 进行下一层选择\n   trace.removeLast();               // 取消选择当前元素，等下次循环进行同层元素的下一个选择\n }\n}\n\n")])]),e._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[e._v("1")]),r("br"),r("span",{staticClass:"line-number"},[e._v("2")]),r("br"),r("span",{staticClass:"line-number"},[e._v("3")]),r("br"),r("span",{staticClass:"line-number"},[e._v("4")]),r("br"),r("span",{staticClass:"line-number"},[e._v("5")]),r("br"),r("span",{staticClass:"line-number"},[e._v("6")]),r("br"),r("span",{staticClass:"line-number"},[e._v("7")]),r("br"),r("span",{staticClass:"line-number"},[e._v("8")]),r("br"),r("span",{staticClass:"line-number"},[e._v("9")]),r("br"),r("span",{staticClass:"line-number"},[e._v("10")]),r("br"),r("span",{staticClass:"line-number"},[e._v("11")]),r("br"),r("span",{staticClass:"line-number"},[e._v("12")]),r("br")])]),r("h2",{attrs:{id:"_3-习题"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-习题"}},[e._v("#")]),e._v(" 3. 习题")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/permutations/",target:"_blank",rel:"noopener noreferrer"}},[e._v("46. 全排列"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number/",target:"_blank",rel:"noopener noreferrer"}},[e._v("17. 电话号码的字母组合"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/n-queens/",target:"_blank",rel:"noopener noreferrer"}},[e._v("51. N 皇后"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/sudoku-solver/",target:"_blank",rel:"noopener noreferrer"}},[e._v("37. 解数独"),r("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=s.exports}}]);