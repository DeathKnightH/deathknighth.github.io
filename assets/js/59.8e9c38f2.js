(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{427:function(_,a,t){"use strict";t.r(a);var v=t(44),r=Object(v.a)({},(function(){var _=this,a=_.$createElement,t=_._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h1",{attrs:{id:"核心知识点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#核心知识点"}},[_._v("#")]),_._v(" 核心知识点")]),_._v(" "),t("h2",{attrs:{id:"_1-事务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-事务"}},[_._v("#")]),_._v(" 1. 事务")]),_._v(" "),t("h3",{attrs:{id:"_1-1-acid"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-acid"}},[_._v("#")]),_._v(" 1.1 ACID")]),_._v(" "),t("ul",[t("li",[_._v("原子性：事务被视为不可分割的最基本单元，一个事务中的操作要么全部成功，要么全部失败回滚。")]),_._v(" "),t("li",[_._v("一致性：数据库在事务执行前后都处于一致性状态，在一致性状态下，所有事务对同一数据读取的状态是一致的。")]),_._v(" "),t("li",[_._v("隔离性：一个事务在提交之前，对其他事务不可见。")]),_._v(" "),t("li",[_._v("持久性：针对数据库崩溃的情况，保证事务一旦完成提交，则必须保证执行结果保存在数据库中不丢失。")])]),_._v(" "),t("h3",{attrs:{id:"_1-2-commit"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-commit"}},[_._v("#")]),_._v(" 1.2 commit")]),_._v(" "),t("p",[_._v("MySQL 有自动提交配置，默认为 true。")]),_._v(" "),t("p",[_._v("如果不需要自动提交事务，有两种方法：")]),_._v(" "),t("ul",[t("li",[_._v("将 "),t("code",[_._v("autocommit")]),_._v(" 配置设为 false。")]),_._v(" "),t("li",[_._v("使用 "),t("code",[_._v("START TRANSACTION")]),_._v("/"),t("code",[_._v("BEGIN")]),_._v(" 语句手动开启事务，使用 "),t("code",[_._v("ROLLBACK")]),_._v(" 回滚，使用 "),t("code",[_._v("COMMIT")]),_._v(" 提交。")])]),_._v(" "),t("h2",{attrs:{id:"_2-并发一致性问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-并发一致性问题"}},[_._v("#")]),_._v(" 2. 并发一致性问题")]),_._v(" "),t("p",[_._v("非并发环境中，只要满足了原子性，就可以保证事务的一致性。")]),_._v(" "),t("p",[_._v("并发环境下，如果仅满足原子性，会造成以下一致性问题：")]),_._v(" "),t("h3",{attrs:{id:"_2-1-丢失修改"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-丢失修改"}},[_._v("#")]),_._v(" 2.1 丢失修改")]),_._v(" "),t("p",[_._v("假设有两个事务 T1 和 T2 对同一条数据进行修改，T1 先修改，T2 再修改，T2 修改的值覆盖了 T1 的修改。。")]),_._v(" "),t("h3",{attrs:{id:"_2-2-读脏数据"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-读脏数据"}},[_._v("#")]),_._v(" 2.2 读脏数据")]),_._v(" "),t("p",[_._v("假设有两个事务 T1 和 T2，T1 对一条数据进行修改，之后 T2 读取同一条数据的值，如果此时 T1 再 rollback，T2 读取的就是脏数据。")]),_._v(" "),t("h3",{attrs:{id:"_2-3-不可重复读"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-不可重复读"}},[_._v("#")]),_._v(" 2.3 不可重复读")]),_._v(" "),t("p",[_._v("假设有两个事务 T1 和 T2，T1 对一条数据进行修改，T2 分别在 T1 修改前和修改后两次读取同一条数据的值，两次结果不一样。")]),_._v(" "),t("h3",{attrs:{id:"_2-4-幻读"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-幻读"}},[_._v("#")]),_._v(" 2.4 幻读")]),_._v(" "),t("p",[_._v("假设有两个事务 T1 和 T2，T2 先读取一个范围的数据，之后 T1 在同一范围内插入/删除一条数据，随后 T2 再次读取这个范围的数据，两次结果集不一样。")]),_._v(" "),t("h2",{attrs:{id:"_3-锁"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-锁"}},[_._v("#")]),_._v(" 3. 锁")]),_._v(" "),t("p",[_._v("解决并发一致性问题，可以利用数据库自带的锁机制。这里只做基本的概念归档，具体数据库锁的实现不一样，在具体实现章节会具体描述。")]),_._v(" "),t("h3",{attrs:{id:"_3-1-锁类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-锁类型"}},[_._v("#")]),_._v(" 3.1 锁类型")]),_._v(" "),t("p",[_._v("最基本的分为 2 种：")]),_._v(" "),t("ul",[t("li",[_._v("排他锁，又称 X 锁，X 锁和其他所有锁互斥。")]),_._v(" "),t("li",[_._v("共享锁，又称 S 锁，S 锁和其他 S 锁共享，和 X 锁互斥。")])]),_._v(" "),t("p",[_._v("在这两种基本的锁基础上还衍生出了更多不同粒度的锁。例如：")]),_._v(" "),t("ul",[t("li",[_._v("IX：意向 X 锁，通常是表的 X 锁。")]),_._v(" "),t("li",[_._v("IS：意向 S 锁，通常是表的 S 锁。")])]),_._v(" "),t("h3",{attrs:{id:"_3-2-锁粒度"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-锁粒度"}},[_._v("#")]),_._v(" 3.2 锁粒度")]),_._v(" "),t("p",[_._v("封锁对象的大小称为锁粒度。")]),_._v(" "),t("p",[_._v("封锁对象可以是逻辑单元：列、行、索引、表等。")]),_._v(" "),t("p",[_._v("也可以是物理单元：数据页、索引页等")]),_._v(" "),t("p",[_._v("常见的锁粒度有行锁和表锁。")]),_._v(" "),t("h2",{attrs:{id:"_4-事务隔离级别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-事务隔离级别"}},[_._v("#")]),_._v(" 4. 事务隔离级别")]),_._v(" "),t("p",[_._v("由于锁需要自行手动操作，比较繁琐，在实际使用中更常用的是利用事务的隔离级别来处理并发一致性问题。")]),_._v(" "),t("p",[_._v("隔离级别分为 4 种。")]),_._v(" "),t("h3",{attrs:{id:"_4-1-read-uncommited-未提交读"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-read-uncommited-未提交读"}},[_._v("#")]),_._v(" 4.1 Read uncommited 未提交读")]),_._v(" "),t("p",[_._v("一个事务中的修改，即使没有提交，对其他事务也是可见的。")]),_._v(" "),t("p",[_._v("最低的隔离级别，还是会有读脏数据、不可重复读、幻读的问题。")]),_._v(" "),t("h3",{attrs:{id:"_4-2-read-commited-提交读"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-read-commited-提交读"}},[_._v("#")]),_._v(" 4.2 Read commited 提交读")]),_._v(" "),t("p",[_._v("一个事务中的修改，只有在提交后才对其他事务可见，提交之前修改对其他事务不可见。")]),_._v(" "),t("p",[_._v("解决读脏数据问题，还是会有不可重复读、幻读问题。")]),_._v(" "),t("h3",{attrs:{id:"_4-3-repeatable-read-可重复读"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-repeatable-read-可重复读"}},[_._v("#")]),_._v(" 4.3 Repeatable read 可重复读")]),_._v(" "),t("p",[_._v("保证同一个事务中任何时候读取同样的数据，结果是一致的。即其他事务的修改即使在本事务运行过程中提交了，也不会对本事务内读取的数据产生。")]),_._v(" "),t("p",[_._v("解决不可重复读问题。")]),_._v(" "),t("h3",{attrs:{id:"_4-4-serializable-串行"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-serializable-串行"}},[_._v("#")]),_._v(" 4.4 Serializable 串行")]),_._v(" "),t("p",[_._v("完全串行执行事务，没有并发。")]),_._v(" "),t("p",[_._v("可以解决所有并发问题。")])])}),[],!1,null,null,null);a.default=r.exports}}]);