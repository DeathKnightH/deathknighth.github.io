(window.webpackJsonp=window.webpackJsonp||[]).push([[99],{488:function(a,t,_){"use strict";_.r(t);var r=_(44),s=Object(r.a)({},(function(){var a=this,t=a.$createElement,_=a._self._c||t;return _("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[_("h1",{attrs:{id:"虚拟机字节码执行引擎"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#虚拟机字节码执行引擎"}},[a._v("#")]),a._v(" 虚拟机字节码执行引擎")]),a._v(" "),_("h2",{attrs:{id:"_1-概念"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-概念"}},[a._v("#")]),a._v(" 1. 概念")]),a._v(" "),_("p",[a._v("字节码执行引擎是JVM 最核心的部分之一，虚拟机规范中制定了虚拟机字节码执行引擎的概念模型，保证了不同实现的执行引擎外观（Facade）是一致的，即输入的是字节码文件，处理过程是字节码解析的等效过程，输出的是执行结果。")]),a._v(" "),_("p",[a._v("但是具体的执行引擎实现可能会有很大的不同，有的是解释执行，有的是编译执行（通过即时编译器产生本地代码再执行），有的则是两者都有。")]),a._v(" "),_("h2",{attrs:{id:"_2-运行时栈帧结构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-运行时栈帧结构"}},[a._v("#")]),a._v(" 2. 运行时栈帧结构")]),a._v(" "),_("p",[a._v("前面分析 JVM 内存结构的时候提到过在虚拟机运行时数据区中有一个线程私有的部分："),_("RouterLink",{attrs:{to:"/java/jvm/JVM内存结构.html#2-虚拟机栈"}},[a._v("虚拟机栈")]),a._v("。")],1),a._v(" "),_("p",[a._v("栈帧就是虚拟机栈中的栈元素，栈帧中存储了方法的局部变量表、操作数栈、动态连接、方法返回地址和一些额外的附加信息。每个栈帧所占的内存大小不受运行时数据的影响，只和编译时产生的 Code 属性以及具体的虚拟机实现有关。")]),a._v(" "),_("p",[a._v("对于执行引擎来说，只有当前位于栈顶的栈帧才是有效的，称为当前栈帧（Current Stack Frame），与当前栈帧关联的方法为当前方法（Current Method），执行引擎运行的所有字节码指令都只对当前栈帧进行操作。")]),a._v(" "),_("h3",{attrs:{id:"_2-1-局部变量表"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-局部变量表"}},[a._v("#")]),a._v(" 2.1 局部变量表")]),a._v(" "),_("p",[a._v("Local Variable Table 是一组变量值存储空间，用于存放方法相关的两种变量：方法参数和局部变量。")]),a._v(" "),_("p",[a._v("Code 属性中的 "),_("code",[a._v("max_locals")]),a._v(" 项的值确定了该方法所需分配的局部变量表的最大容量，单位是 "),_("code",[a._v("Variable Slot")]),a._v("（变量槽）。")]),a._v(" "),_("h4",{attrs:{id:"_2-1-1-数据类型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-1-数据类型"}},[a._v("#")]),a._v(" 2.1.1 数据类型")]),a._v(" "),_("p",[a._v("按虚拟机规范规定，一个 slot 应该至少能存放一个 32 位以内的数据，对于 64 位的数据，虚拟机会以高位对齐的方式为其分配两个连续的 slot 空间。")]),a._v(" "),_("h4",{attrs:{id:"_2-1-2-内存分配"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-2-内存分配"}},[a._v("#")]),a._v(" 2.1.2 内存分配")]),a._v(" "),_("h3",{attrs:{id:"_2-2-操作栈"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-操作栈"}},[a._v("#")]),a._v(" 2.2 操作栈")]),a._v(" "),_("h3",{attrs:{id:"_2-3-动态连接"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-动态连接"}},[a._v("#")]),a._v(" 2.3 动态连接")]),a._v(" "),_("h3",{attrs:{id:"_2-4-返回地址"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-返回地址"}},[a._v("#")]),a._v(" 2.4 返回地址")]),a._v(" "),_("h2",{attrs:{id:"_3-执行逻辑"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-执行逻辑"}},[a._v("#")]),a._v(" 3. 执行逻辑")]),a._v(" "),_("h3",{attrs:{id:"_3-1-方法调用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-方法调用"}},[a._v("#")]),a._v(" 3.1 方法调用")]),a._v(" "),_("h3",{attrs:{id:"_3-2-字节码执行"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-字节码执行"}},[a._v("#")]),a._v(" 3.2 字节码执行")])])}),[],!1,null,null,null);t.default=s.exports}}]);