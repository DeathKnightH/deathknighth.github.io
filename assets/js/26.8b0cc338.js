(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{391:function(n,s,t){"use strict";t.r(s);var a=t(44),e=Object(a.a)({},(function(){var n=this,s=n.$createElement,t=n._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h1",{attrs:{id:"计数排序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#计数排序"}},[n._v("#")]),n._v(" 计数排序")]),n._v(" "),t("p",[n._v("计数排序（Counting Sort）是一种基于"),t("code",[n._v("非比较")]),n._v("的具有线性时间复杂度的排序算法。")]),n._v(" "),t("p",[n._v("计数排序高效的前提是元素的值域（基数）较小。")]),n._v(" "),t("h2",{attrs:{id:"_1-工作原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-工作原理"}},[n._v("#")]),n._v(" 1. 工作原理")]),n._v(" "),t("p",[n._v("使用一个额外的数组 "),t("code",[n._v("C[i]")]),n._v("，其中第 i 个元素是待排序序列中排序值等于 i 的个数。")]),n._v(" "),t("p",[n._v("工作流程大致分为以下3步：")]),n._v(" "),t("ul",[t("li",[n._v("遍历序列，计数每个元素出现的次数，放入数组 "),t("code",[n._v("C[i]")])]),n._v(" "),t("li",[n._v("遍历数组 "),t("code",[n._v("C[i]")]),n._v("，计算前缀和。")]),n._v(" "),t("li",[n._v("根据前缀和，遍历原序列重新构造一个数组")])]),n._v(" "),t("p",[n._v("如果原序列中的元素本身就是整形，后两步可以简化为直接按出现次数输出一个新的整形序列，不需要计算前缀和。")]),n._v(" "),t("h2",{attrs:{id:"_2-性质"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-性质"}},[n._v("#")]),n._v(" 2. 性质")]),n._v(" "),t("table",[t("thead",[t("tr",[t("th",[n._v("性质")]),n._v(" "),t("th"),n._v(" "),t("th",[n._v("描述")])])]),n._v(" "),t("tbody",[t("tr",[t("td",[n._v("稳定性")]),n._v(" "),t("td",[n._v("稳定")]),n._v(" "),t("td",[n._v("稳定性来自于工作流程的第三步，输出最终排序序列时还是会按原序列的相对顺序遍历一遍，用前缀和确定相同一组元素的起始位置，但是一组相同元素内部的相对位置没有变化")])]),n._v(" "),t("tr",[t("td",[n._v("最坏时间复杂度")]),n._v(" "),t("td",[n._v("O(n + w)")]),n._v(" "),t("td")]),n._v(" "),t("tr",[t("td",[n._v("最好时间复杂度")]),n._v(" "),t("td",[n._v("O(n + w)")]),n._v(" "),t("td")]),n._v(" "),t("tr",[t("td",[n._v("平均时间复杂度")]),n._v(" "),t("td",[n._v("O(n + w)")]),n._v(" "),t("td",[n._v("w是值域大小，各需遍历原序列和值域数组有限次数")])]),n._v(" "),t("tr",[t("td",[n._v("空间复杂度")]),n._v(" "),t("td",[n._v("O(n + w)")]),n._v(" "),t("td",[n._v("需要一个和原序列大小相同的新序列，以及一个满足值域大小（w）的数组用于计数")])])])]),n._v(" "),t("h2",{attrs:{id:"_3-伪代码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-伪代码"}},[n._v("#")]),n._v(" 3. 伪代码")]),n._v(" "),t("p",[n._v("通用场景：")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("public Object[] countingSort(Object[] source){\n  // 先找出最大值和最小值\n  int max = Arrays.stream(source).max(comparator).getAsInt();\n  int min = Arrays.stream(source).min(comparator).getAsInt();\n  int n = max - min + 1;\n  int[] counting = new int[n];      // 构造计数用的数组\n  \n  // 计数\n  for(Object temp : source){\n    counting[temp.key - min] ++;    // 通过与 min 的偏移量在counting数组中计数\n  }\n  \n  // 计算前缀和\n  for(int i = 1; i < n; i ++){\n    counting[i] += counting[i - 1];\n  }\n  \n  // 构造有序的结果序列\n  int[] result = new int[source.length];\n  Arrays.fill(result, inf);         // 数组元素初始化为范围外的值\n  for(int i = 0; i < source.length; i ++){\n    int temp = source[i];\n    int tempIndex = counting[temp - min];\n    if(result[tempIndex] != inf){\n      tempIndex ++;\n    }\n    result[tempIndex] = temp;\n    counting[temp - min] = tempIndex;\n  }\n  \n  return result;\n}\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br"),t("span",{staticClass:"line-number"},[n._v("27")]),t("br"),t("span",{staticClass:"line-number"},[n._v("28")]),t("br"),t("span",{staticClass:"line-number"},[n._v("29")]),t("br"),t("span",{staticClass:"line-number"},[n._v("30")]),t("br"),t("span",{staticClass:"line-number"},[n._v("31")]),t("br"),t("span",{staticClass:"line-number"},[n._v("32")]),t("br")])]),t("p",[n._v("整形序列场景：")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("public int[] countingSort(int[] source){\n  // 先找出最大值和最小值\n  int max = Arrays.stream(source).max().getAsInt();\n  int min = Arrays.stream(source).min().getAsInt();\n  int n = max - min + 1;\n  int[] counting = new int[n];      // 构造计数用的数组\n  \n  // 计数\n  for(Object temp : source){\n    counting[temp.key - min] ++;    // 通过与 min 的偏移量在counting数组中计数\n  }\n  \n  // 直接根据计数数组输出结果，不需要计算前缀和\n  int[] result = new int[source.length];\n  int currentIndex = 0;\n  for(int i = 0; i < n; i++){\n    int temp = counting[i];\n    while(temp > 0){\n      result[currentIndex] = i;\n      currentIndex ++;\n      temp --;\n    }\n  }\n}\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br")])]),t("h2",{attrs:{id:"_4-优化细节"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-优化细节"}},[n._v("#")]),n._v(" 4. 优化细节")]),n._v(" "),t("ul",[t("li",[n._v("第一遍遍历时可以记录最小值和最大值，并将最小值作为数组的起点，相对 index 为 0，方便构造尽可能小的计数数组。")])]),n._v(" "),t("h2",{attrs:{id:"_5-实例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-实例"}},[n._v("#")]),n._v(" 5. 实例")]),n._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/h-index/",target:"_blank",rel:"noopener noreferrer"}},[n._v("274.H 指数"),t("OutboundLink")],1),n._v(" ，没有实际排序，只是用到了计数排序的思想")]),n._v(" "),t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/sort-an-array/",target:"_blank",rel:"noopener noreferrer"}},[n._v("912.排序数组"),t("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=e.exports}}]);