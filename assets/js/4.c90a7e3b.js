(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{383:function(a,s,v){a.exports=v.p+"assets/img/Classlifecycle.drawio.28a78d45.png"},384:function(a,s,v){a.exports=v.p+"assets/img/Classloadprocess.drawio.dd29d369.png"},385:function(a,s,v){a.exports=v.p+"assets/img/parentsdelegation.drawio.b8d21080.png"},486:function(a,s,v){"use strict";v.r(s);var _=v(44),t=Object(_.a)({},(function(){var a=this,s=a.$createElement,_=a._self._c||s;return _("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[_("h1",{attrs:{id:"类加载机制"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#类加载机制"}},[a._v("#")]),a._v(" 类加载机制")]),a._v(" "),_("h2",{attrs:{id:"_1-概述"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-概述"}},[a._v("#")]),a._v(" 1. 概述")]),a._v(" "),_("p",[a._v("区别于其他在编译时需要进行连接工作的语言，Java 的类型加载、连接、初始化过程都是在运行时完成的。")]),a._v(" "),_("p",[a._v("虚拟机把描述类的数据从 class 文件（不一定是磁盘文件，只要是能输入的二进制流都行）加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的 Java 类型，这就是类加载。")]),a._v(" "),_("p",[a._v("在虚拟机中类的生命周期如下：\n"),_("img",{attrs:{src:v(383),alt:"image-class-lifecycle"}})]),a._v(" "),_("p",[a._v("这些阶段除了 "),_("code",[a._v("解析")]),a._v(" 以外都是按顺序开始的，但不一定按顺序完成，比如可能类还没完成 "),_("code",[a._v("加载")]),a._v("，就已经开始 "),_("code",[a._v("验证")]),a._v(" 了，这些阶段通常是互相交叉进行的。")]),a._v(" "),_("h2",{attrs:{id:"_2-类加载的时机"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-类加载的时机"}},[a._v("#")]),a._v(" 2. 类加载的时机")]),a._v(" "),_("p",[a._v("虚拟机规范没有规定 "),_("code",[a._v("Loading")]),a._v(" 阶段执行的时机，但是强制规定了 "),_("code",[a._v("Initialization")]),a._v(" 阶段的执行时机，即有且仅有在 6 种主动引用类的情况下，必须进行 "),_("code",[a._v("Initialization")]),a._v("。")]),a._v(" "),_("p",[a._v("可以使用：")]),a._v(" "),_("blockquote",[_("p",[a._v("-XX:+TraceClassLoading")])]),a._v(" "),_("p",[a._v("参数来观察类加载的实际情况。也可以通过在类的静态域添加 print 方法来判断该类是否执行了初始化。")]),a._v(" "),_("h3",{attrs:{id:"_2-1-主动引用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-主动引用"}},[a._v("#")]),a._v(" 2.1 主动引用")]),a._v(" "),_("p",[a._v("主动引用在规范中有且仅有 6 种情况：")]),a._v(" "),_("ul",[_("li",[a._v("遇到 new、getstatic、putstatic、invokestatic 这 4 条字节码指令的任意一条时，如果目标类没有进行初始化，则会先触发初始化。")]),a._v(" "),_("li",[a._v("使用 java.lang.reflect 包的方法对目标类进行反射调用时，如果目标类没有进行初始化，则会先触发初始化。")]),a._v(" "),_("li",[a._v("进行一个类的初始化时，如果该类的父类没有进行初始化，则会先触发其父类的初始化。")]),a._v(" "),_("li",[a._v("虚拟机启动时，用户指定执行的主类（即 main 方法所在的类）会先触发初始化。")]),a._v(" "),_("li",[a._v("使用动态语言支持时，MethodHandle 和 VarHandle 调用前需要使用 "),_("code",[a._v("findeStaticVarHandle")]),a._v(" 来初始化目标类。")]),a._v(" "),_("li",[a._v("JDK 8 之后如果在接口中定义了 default 方法，在其实现类初始化之前需要先对接口进行初始化。")])]),a._v(" "),_("h3",{attrs:{id:"_2-2-被动引用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-被动引用"}},[a._v("#")]),a._v(" 2.2 被动引用")]),a._v(" "),_("p",[a._v("除了以上 6 种强制初始化的情况，其余情况都是被动引用，不用强制执行初始化。")]),a._v(" "),_("h2",{attrs:{id:"_3-类加载过程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-类加载过程"}},[a._v("#")]),a._v(" 3. 类加载过程")]),a._v(" "),_("p",[a._v("类加载总体分为 5 个阶段，加载、验证、准备、解析、初始化。其中验证、准备、解析可以统称为 "),_("code",[a._v("连接")]),a._v("。\n"),_("img",{attrs:{src:v(384),alt:"image-class-lifecycle"}})]),a._v(" "),_("h3",{attrs:{id:"_3-1-加载-loading"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-加载-loading"}},[a._v("#")]),a._v(" 3.1 加载（Loading）")]),a._v(" "),_("p",[a._v("加载阶段是类加载过程的第一步，主要完成以下 3 件事：")]),a._v(" "),_("ol",[_("li",[a._v("通过类的全限定名来获取此类的二进制字节流。")]),a._v(" "),_("li",[a._v("将这个字节流所代表的静态存储结构转换为方法区的运行时数据结构。")]),a._v(" "),_("li",[a._v("在内存中生成一个代表这个类的 "),_("code",[a._v("java.lang.Class")]),a._v(" 对象，作为方法区这些数据的访问入口。")])]),a._v(" "),_("p",[a._v("以上 3 点都没有具体的描述，实际实现方式和应用都很灵活。")]),a._v(" "),_("p",[a._v("利用这些灵活性，我们可以定制加载阶段的具体实现，比如自定义获取二进制流的过程，可以从网络上来，也可以从加密后的文件解密得来，也可以在运行时计算生成。")]),a._v(" "),_("h3",{attrs:{id:"_3-2-验证-verification"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-验证-verification"}},[a._v("#")]),a._v(" 3.2 验证（Verification）")]),a._v(" "),_("p",[a._v("验证阶段的目的是确保 Class 二进制流中包含的信息符合虚拟机的要求，同时保证其内容不会危害虚拟机的安全。")]),a._v(" "),_("p",[a._v("总体上看，此阶段大致会完成以下 4 个校验动作：")]),a._v(" "),_("ol",[_("li",[a._v("文件格式验证\n验证字节流是否符合 Class 文件格式的规范。比如以下验证点：")])]),a._v(" "),_("ul",[_("li",[a._v("是否以 "),_("code",[a._v("0xCAFEBABE")]),a._v(" 开头")]),a._v(" "),_("li",[a._v("主、次版本号是否在当前虚拟机的处理范围内")]),a._v(" "),_("li",[a._v("检查常量 tag 标志，是否存在不被支持的常量类型")])]),a._v(" "),_("p",[a._v("。。。等")]),a._v(" "),_("ol",{attrs:{start:"2"}},[_("li",[a._v("元数据验证\n验证字节码描述信息，保证其符合 Java 语言规范的要求。比如以下验证点：")])]),a._v(" "),_("ul",[_("li",[a._v("这个类是否有父类")]),a._v(" "),_("li",[a._v("如果这个类不是抽象类，是否实现了接口和其父类要求实现的所有方法")])]),a._v(" "),_("p",[a._v("。。。等")]),a._v(" "),_("ol",{attrs:{start:"3"}},[_("li",[a._v("字节码验证\n通过数据流和控制流分析，确保程序语义是合法的、符合逻辑的。比如：")])]),a._v(" "),_("ul",[_("li",[a._v("保证跳转指令不会跳转到方法体以外的字节码指令上")]),a._v(" "),_("li",[a._v("保证方法体中的类型转换是有效的")])]),a._v(" "),_("p",[a._v("。。。等")]),a._v(" "),_("ol",{attrs:{start:"4"}},[_("li",[a._v("符号引用验证\n这部分的验证发生在 "),_("code",[a._v("解析")]),a._v(" 阶段中，目的是保证符号引用转换为直接引用的解析操作能正常进行。")])]),a._v(" "),_("h3",{attrs:{id:"_3-3-准备-preparation"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-准备-preparation"}},[a._v("#")]),a._v(" 3.3 准备（Preparation）")]),a._v(" "),_("p",[a._v("正式为 "),_("code",[a._v("类变量")]),a._v(" 分配内存并设置 "),_("code",[a._v("类变量初始值")]),a._v(" 的阶段。")]),a._v(" "),_("p",[a._v("有以下注意点：")]),a._v(" "),_("ol",[_("li",[a._v("这里的初始值通常情况是指 "),_("code",[a._v("零值")]),a._v("。比如定义了")])]),a._v(" "),_("div",{staticClass:"language- line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[a._v("private static int value = 128;\n")])]),a._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[a._v("1")]),_("br")])]),_("p",[a._v("准备阶段设置的初始值为 "),_("code",[a._v("0")]),a._v(" 而不是 "),_("code",[a._v("128")]),a._v("。以下给出零值列表：")]),a._v(" "),_("table",[_("thead",[_("tr",[_("th",[a._v("数据类型")]),a._v(" "),_("th",[a._v("零值")])])]),a._v(" "),_("tbody",[_("tr",[_("td",[a._v("int")]),a._v(" "),_("td",[a._v("0")])]),a._v(" "),_("tr",[_("td",[a._v("long")]),a._v(" "),_("td",[a._v("0L")])]),a._v(" "),_("tr",[_("td",[a._v("short")]),a._v(" "),_("td",[a._v("0")])]),a._v(" "),_("tr",[_("td",[a._v("char")]),a._v(" "),_("td",[a._v("'\\u0000'")])]),a._v(" "),_("tr",[_("td",[a._v("byte")]),a._v(" "),_("td",[a._v("0")])]),a._v(" "),_("tr",[_("td",[a._v("boolean")]),a._v(" "),_("td",[a._v("false")])]),a._v(" "),_("tr",[_("td",[a._v("float")]),a._v(" "),_("td",[a._v("0.0f")])]),a._v(" "),_("tr",[_("td",[a._v("double")]),a._v(" "),_("td",[a._v("0.0d")])]),a._v(" "),_("tr",[_("td",[a._v("reference")]),a._v(" "),_("td",[a._v("null")])])])]),a._v(" "),_("p",[a._v("2）特殊情况：当类字段的字段属性表中存在 "),_("code",[a._v("ConstantValue")]),a._v(" 属性时，那么在准备阶段会将字段设置为 "),_("code",[a._v("ConstantValue")]),a._v(" 指定的值。比如将上一个类变量定义改为：")]),a._v(" "),_("div",{staticClass:"language- line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[a._v("private static final int value = 128;\n")])]),a._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[a._v("1")]),_("br")])]),_("p",[a._v("添加了 final 关键字，编译时 Javac 会为 "),_("code",[a._v("value")]),a._v(" 生成 "),_("code",[a._v("ConstantValue")]),a._v(" 属性且指定为 "),_("code",[a._v("128")]),a._v("，那么准备阶段就会设置初始值为 "),_("code",[a._v("128")]),a._v("。")]),a._v(" "),_("h3",{attrs:{id:"_3-4-解析-resolution"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-解析-resolution"}},[a._v("#")]),a._v(" 3.4 解析（Resolution）")]),a._v(" "),_("p",[a._v("前面符号引用验证时提到过，解析阶段的目的是将常量池中的 "),_("code",[a._v("符号引用")]),a._v(" 替换为 "),_("code",[a._v("直接引用")]),a._v("。")]),a._v(" "),_("h3",{attrs:{id:"_3-5-初始化-initialization"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-初始化-initialization"}},[a._v("#")]),a._v(" 3.5 初始化（Initialization）")]),a._v(" "),_("p",[a._v("初始化目的是执行初始化方法 "),_("code",[a._v("<clinit>()")]),a._v("，是类加载的最后一个阶段，这一阶段才会真正开始执行 Java 程序中定义的代码。")]),a._v(" "),_("p",[_("code",[a._v("<clinit>()")]),a._v(" 方法是由编译器自动收集类中的所有类变量的赋值动作和静态语句块（即 static{} 块）中的语句合并产生的，不是类的构造函数 "),_("code",[a._v("<init>()")]),a._v("。")]),a._v(" "),_("p",[a._v("初始化过程有以下特点：")]),a._v(" "),_("ul",[_("li",[a._v("虚拟机会保证类的父类的 "),_("code",[a._v("<clinit>()")]),a._v(" 在子类 "),_("code",[a._v("<clinit>()")]),a._v(" 方法执行前完成，所以虚拟机中第一个执行的 "),_("code",[a._v("<clinit>()")]),a._v(" 方法一定是 "),_("code",[a._v("java.lang.Object")]),a._v(" 类的。")]),a._v(" "),_("li",[a._v("由于 "),_("code",[a._v("<clinit>()")]),a._v(" 的顺序固定，所以父类的静态语句块一定先于子类的静态语句块执行。")]),a._v(" "),_("li",[_("code",[a._v("<clinit>()")]),a._v(" 方法对于类和接口来说不是必须的，如果一个类没有静态语句块，也没有对类变量的赋值操作，那么编译器可能不会为其生成 "),_("code",[a._v("<clinit>()")]),a._v(" 方法。")]),a._v(" "),_("li",[a._v("接口中的 "),_("code",[a._v("<clinit>()")]),a._v(" 方法用于给变量赋值，且不需要先执行父接口的 "),_("code",[a._v("<clinit>()")]),a._v("，除非父接口定义的变量被接口使用；另外接口的实现类在初始化时也不会先执行接口的 "),_("code",[a._v("<clinit>()")]),a._v(" 方法，除非接口定义的变量被实现类使用。")]),a._v(" "),_("li",[a._v("虚拟机会保证 "),_("code",[a._v("<clinit>()")]),a._v(" 方法的执行是线程安全的，如果同时有多个线程初始化同一个类，那只有一个线程会执行 "),_("code",[a._v("<clinit>()")]),a._v(" 方法，其他线程都会阻塞。需要注意 "),_("code",[a._v("<clinit>()")]),a._v(" 只会执行一次，所以其他线程唤醒后不会再执行 "),_("code",[a._v("<clinit>()")]),a._v("。")])]),a._v(" "),_("h2",{attrs:{id:"_4-类加载器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-类加载器"}},[a._v("#")]),a._v(" 4. 类加载器")]),a._v(" "),_("p",[a._v("类加载的第一个阶段 "),_("code",[a._v("加载")]),a._v(" 中有一个动作：“通过一个类的全限定名来获取描述此类的二进制字节流”。这个动作被放到虚拟机外实现，可以让应用程序自己决定如何获取所需的类，实现这个动作的代码模块称为"),_("code",[a._v("类加载器")]),a._v("。")]),a._v(" "),_("h3",{attrs:{id:"_4-1-从虚拟机角度"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-从虚拟机角度"}},[a._v("#")]),a._v(" 4.1 从虚拟机角度")]),a._v(" "),_("p",[a._v("对虚拟机来说，类加载器只有两类：")]),a._v(" "),_("ul",[_("li",[a._v("一类是启动类加载器（Bootstrap ClassLoader），对于 HotSpot 虚拟机来说这个类加载器由 C++ 实现。")]),a._v(" "),_("li",[a._v("另一种就是其他类加载器，全部都是由 Java 语言实现，独立于虚拟机，且都继承自 "),_("code",[a._v("java.lang.ClassLoader")]),a._v(" 抽象类。")])]),a._v(" "),_("h3",{attrs:{id:"_4-2-从实现角度"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-从实现角度"}},[a._v("#")]),a._v(" 4.2 从实现角度")]),a._v(" "),_("p",[a._v("从开发人员角度看，类加载器可以细分为 4 种：")]),a._v(" "),_("ul",[_("li",[a._v("启动类加载器（Bootstrap ClassLoader）：负责加载存放在 "),_("code",[a._v("<JAVA_HOME>\\lib")]),a._v(" 目录中，或者 "),_("code",[a._v("-Xbootclasspath")]),a._v(" 虚拟机参数指定的路径中的类库（而且文件名必须能被虚拟机识别）。这个类加载器最特殊，无法被java 程序代码直接引用，一般在运行时调用 Class 的 "),_("code",[a._v("getClassLoader()")]),a._v(" 方法，如果返回值是 null，说明该类就是由 "),_("code",[a._v("Bootstrap ClassLoader")]),a._v(" 加载的。")]),a._v(" "),_("li",[a._v("扩展类加载器（Extension ClassLoader）：负责加载 "),_("code",[a._v("<JAVA_HOME>\\lib\\ext")]),a._v(" 目录中，或者 "),_("code",[a._v("java.ext.dirs")]),a._v(" 系统变量指定的路径中的类库。这个类加载器由 "),_("code",[a._v("sun.misc.Launcher.ExtClassLoader")]),a._v(" 实现，没有启动类加载器的限制，可以加载路径下所有的类库，而且是 java 代码实现可以直接引用，因此开发者可以在代码中直接使用此类加载器。")]),a._v(" "),_("li",[a._v("应用程序类加载器（Application ClassLoader）：负责加载用户类路径（ClassPath）指定的类库。由 "),_("code",[a._v("sun.misc.Launcher.AppClassLoader")]),a._v(" 实现，开发者也可以在代码中直接使用这个类加载器。正常情况下，如果没有特别指定其他类加载器，应用程序代码使用的就是这个类加载器。")]),a._v(" "),_("li",[a._v("用户自定义类加载器（User ClassLoader）：用户自定义实现的类加载器。一般继承自 "),_("code",[a._v("java.lang.ClassLoader")]),a._v(" 抽象类，通过重写 "),_("code",[a._v("findClass()")]),a._v(" 方法实现用户自定义的功能，比如字节码加解密、字节码增强功能等。")])]),a._v(" "),_("h3",{attrs:{id:"_4-3-parents-delegation-model-双亲委派模型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-parents-delegation-model-双亲委派模型"}},[a._v("#")]),a._v(" 4.3 Parents Delegation Model （双亲委派模型）")]),a._v(" "),_("p",[a._v("上文讨论的类加载器之间的层次关系大致如下：")]),a._v(" "),_("p",[_("img",{attrs:{src:v(385),alt:"image-class-parents-delegation"}})]),a._v(" "),_("p",[a._v("如图这种类加载器的层次关系称为 "),_("code",[a._v("Parents Delegation Model")]),a._v("，模型要求除了 "),_("code",[a._v("Bootstrap ClassLoader")]),a._v(" 外所有类加载器都需要有自己的父类加载器。")]),a._v(" "),_("p",[a._v("这个模型并不是强制要求，而是一种推荐的类加载器实现方式。")]),a._v(" "),_("p",[a._v("Parents Delegation Model 的工作流程可以从 "),_("code",[a._v("java.lang.ClassLoader#loadClass(java.lang.String, boolean)")]),a._v(" 方法中看出来，以下是 jdk 8 的源代码：")]),a._v(" "),_("div",{staticClass:"language- line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[a._v("private final ClassLoader parent;\nprotected Class<?> loadClass(String name, boolean resolve)\n        throws ClassNotFoundException\n    {\n        synchronized (getClassLoadingLock(name)) {\n            // 首先，检查请求的类是否已经被加载过\n            Class<?> c = findLoadedClass(name);\n            if (c == null) {\n                long t0 = System.nanoTime();\n                try {\n                    if (parent != null) {//父加载器不为空，调用父加载器loadClass()方法处理\n                        c = parent.loadClass(name, false);\n                    } else {//父加载器为空，使用启动类加载器 BootstrapClassLoader 加载\n                        c = findBootstrapClassOrNull(name);\n                    }\n                } catch (ClassNotFoundException e) {\n                   //抛出异常说明父类加载器无法完成加载请求\n                }\n\n                if (c == null) {\n                    long t1 = System.nanoTime();\n                    //自己尝试加载\n                    c = findClass(name);\n\n                    // this is the defining class loader; record the stats\n                    sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);\n                    sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);\n                    sun.misc.PerfCounter.getFindClasses().increment();\n                }\n            }\n            if (resolve) {\n                resolveClass(c);\n            }\n            return c;\n        }\n    }\n\n")])]),a._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[a._v("1")]),_("br"),_("span",{staticClass:"line-number"},[a._v("2")]),_("br"),_("span",{staticClass:"line-number"},[a._v("3")]),_("br"),_("span",{staticClass:"line-number"},[a._v("4")]),_("br"),_("span",{staticClass:"line-number"},[a._v("5")]),_("br"),_("span",{staticClass:"line-number"},[a._v("6")]),_("br"),_("span",{staticClass:"line-number"},[a._v("7")]),_("br"),_("span",{staticClass:"line-number"},[a._v("8")]),_("br"),_("span",{staticClass:"line-number"},[a._v("9")]),_("br"),_("span",{staticClass:"line-number"},[a._v("10")]),_("br"),_("span",{staticClass:"line-number"},[a._v("11")]),_("br"),_("span",{staticClass:"line-number"},[a._v("12")]),_("br"),_("span",{staticClass:"line-number"},[a._v("13")]),_("br"),_("span",{staticClass:"line-number"},[a._v("14")]),_("br"),_("span",{staticClass:"line-number"},[a._v("15")]),_("br"),_("span",{staticClass:"line-number"},[a._v("16")]),_("br"),_("span",{staticClass:"line-number"},[a._v("17")]),_("br"),_("span",{staticClass:"line-number"},[a._v("18")]),_("br"),_("span",{staticClass:"line-number"},[a._v("19")]),_("br"),_("span",{staticClass:"line-number"},[a._v("20")]),_("br"),_("span",{staticClass:"line-number"},[a._v("21")]),_("br"),_("span",{staticClass:"line-number"},[a._v("22")]),_("br"),_("span",{staticClass:"line-number"},[a._v("23")]),_("br"),_("span",{staticClass:"line-number"},[a._v("24")]),_("br"),_("span",{staticClass:"line-number"},[a._v("25")]),_("br"),_("span",{staticClass:"line-number"},[a._v("26")]),_("br"),_("span",{staticClass:"line-number"},[a._v("27")]),_("br"),_("span",{staticClass:"line-number"},[a._v("28")]),_("br"),_("span",{staticClass:"line-number"},[a._v("29")]),_("br"),_("span",{staticClass:"line-number"},[a._v("30")]),_("br"),_("span",{staticClass:"line-number"},[a._v("31")]),_("br"),_("span",{staticClass:"line-number"},[a._v("32")]),_("br"),_("span",{staticClass:"line-number"},[a._v("33")]),_("br"),_("span",{staticClass:"line-number"},[a._v("34")]),_("br"),_("span",{staticClass:"line-number"},[a._v("35")]),_("br"),_("span",{staticClass:"line-number"},[a._v("36")]),_("br"),_("span",{staticClass:"line-number"},[a._v("37")]),_("br")])]),_("p",[a._v("这种工作模式保证了 Java 类的优先级关系，确保优先级高的类不会被用户自定义类覆盖或者在一个虚拟机中不会出现多个 "),_("code",[a._v("java.lang.Object")]),a._v(" 这种系统类。")]),a._v(" "),_("h3",{attrs:{id:"_4-4-不遵循-parents-delegation-model"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-不遵循-parents-delegation-model"}},[a._v("#")]),a._v(" 4.4 不遵循 Parents Delegation Model？")]),a._v(" "),_("p",[a._v("例如 OSGi 中的网状结构模型。")]),a._v(" "),_("p",[a._v("再例如，Tomcat 中的 webapplication classloader，会先尝试自己加载 webapp 中的类，加载不了才会委托父加载器。这样做是为了隔离各应用的类，同时也由 JVM 保证了 JRE 中的类不会被篡改。")]),a._v(" "),_("p",[a._v("tomcat 容器中默认的类加载先后顺序为：")]),a._v(" "),_("ul",[_("li",[a._v("Bootstrap classes of your JVM")]),a._v(" "),_("li",[a._v("/WEB-INF/classes of your web application")]),a._v(" "),_("li",[a._v("/WEB-INF/lib/*.jar of your web application")]),a._v(" "),_("li",[a._v("System class loader classes (described above)")]),a._v(" "),_("li",[a._v("Common class loader classes (described above)")])]),a._v(" "),_("p",[a._v("除 JRE 类以外先加载用户应用的类，再加载 tomcat 本身依赖的类。")]),a._v(" "),_("p",[a._v("特别的，当配置了 "),_("code",[a._v('<Loader delegate="true"/>')]),a._v(" 后，类加载顺序会变为：")]),a._v(" "),_("ul",[_("li",[a._v("Bootstrap classes of your JVM")]),a._v(" "),_("li",[a._v("System class loader classes (described above)")]),a._v(" "),_("li",[a._v("Common class loader classes (described above)")]),a._v(" "),_("li",[a._v("/WEB-INF/classes of your web application")]),a._v(" "),_("li",[a._v("/WEB-INF/lib/*.jar of your web application")])]),a._v(" "),_("p",[a._v("JBoss 和 tomcat 相反，默认先加载 JBoss 自身依赖的类，再加载用户应用中的类。")]),a._v(" "),_("h2",{attrs:{id:"_5-类卸载"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_5-类卸载"}},[a._v("#")]),a._v(" 5. 类卸载")]),a._v(" "),_("p",[a._v("类卸载完成的标志是类的 "),_("code",[a._v("Class")]),a._v(" 对象被 GC。")]),a._v(" "),_("p",[a._v("类卸载需要满足以下 3 个条件：")]),a._v(" "),_("ul",[_("li",[a._v("该类的所有实例对象都已经被回收。")]),a._v(" "),_("li",[a._v("该类没有在任何除自己以外的地方被引用。")]),a._v(" "),_("li",[a._v("该类的类加载器实例已经被回收。")])])])}),[],!1,null,null,null);s.default=t.exports}}]);