(window.webpackJsonp=window.webpackJsonp||[]).push([[72],{441:function(_,v,a){"use strict";a.r(v);var t=a(44),l=Object(t.a)({},(function(){var _=this,v=_.$createElement,a=_._self._c||v;return a("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[a("h1",{attrs:{id:"数据库系统"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据库系统"}},[_._v("#")]),_._v(" 数据库系统")]),_._v(" "),a("h2",{attrs:{id:"_1-数据库组成"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-数据库组成"}},[_._v("#")]),_._v(" 1. 数据库组成")]),_._v(" "),a("p",[_._v("一个完整的关系数据库大致由以下5个部分组成：")]),_._v(" "),a("ul",[a("li",[_._v("存储管理器（transactional storage manager）")])]),_._v(" "),a("p",[_._v("管理具体数据的存储、索引等，通常采用 B+ 树存储。")]),_._v(" "),a("ul",[a("li",[_._v("关系查询处理器（relational query processer）")])]),_._v(" "),a("p",[_._v("解析/优化/鉴权 SQL 查询。")]),_._v(" "),a("ul",[a("li",[_._v("客户端/服务端通信管理器（client communications manager）")])]),_._v(" "),a("p",[_._v("管理客户端和数据库的交互，处理客户端请求。")]),_._v(" "),a("ul",[a("li",[_._v("进程管理器（process manager）")])]),_._v(" "),a("p",[_._v("负责管理和分配计算资源。")]),_._v(" "),a("ul",[a("li",[_._v("共享组件和工具（shared components and utilities）")])]),_._v(" "),a("p",[_._v("一些在所有商用 DBMS 中都有的共享组件和工具，例如备份、监控、统计工具。")]),_._v(" "),a("p",[_._v("由于一个数据库系统涉及的模块太多，这里只记录比较重要的模块。")]),_._v(" "),a("h3",{attrs:{id:"_1-1-客户端管理器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-客户端管理器"}},[_._v("#")]),_._v(" 1.1 客户端管理器")]),_._v(" "),a("p",[_._v("用于处理客户端通信。")]),_._v(" "),a("p",[_._v("客户端通过客户端管理器访问数据库，此时通常客户端管理器有以下作用：")]),_._v(" "),a("ul",[a("li",[_._v("调用权限管理验证客户端权限")]),_._v(" "),a("li",[_._v("管理客户端连接")]),_._v(" "),a("li",[_._v("接收 SQL 请求，并交给 SQL 引擎处理")]),_._v(" "),a("li",[_._v("将获取的结果集返回给客户端")])]),_._v(" "),a("h3",{attrs:{id:"_1-2-关系查询处理器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-关系查询处理器"}},[_._v("#")]),_._v(" 1.2 关系查询处理器")]),_._v(" "),a("p",[_._v("一条 SQL 语句进入引擎会经过 "),a("code",[_._v("解析")]),_._v("、"),a("code",[_._v("重写")]),_._v("、"),a("code",[_._v("优化")]),_._v("、"),a("code",[_._v("编译")]),_._v("，最后才会执行。")]),_._v(" "),a("ul",[a("li",[_._v("解析")])]),_._v(" "),a("p",[_._v("输入的是原始的 SQL 语句，输出的是解析后的内部表示（通常是一个树型结构）。")]),_._v(" "),a("p",[_._v("解析过程会进行一系列的检查：")]),_._v(" "),a("ul",[a("li",[_._v("关键字是否正确")]),_._v(" "),a("li",[_._v("语法是否正确")]),_._v(" "),a("li",[_._v("数据库表、字段是否存在")]),_._v(" "),a("li",[_._v("运算类型是否正确")]),_._v(" "),a("li",[_._v("是否有权限读取/写入数据")])]),_._v(" "),a("ul",[a("li",[_._v("重写")])]),_._v(" "),a("p",[_._v("重写会进行一些预优化：")]),_._v(" "),a("ul",[a("li",[_._v("视图合并，将视图转换为对应的 SQL 查询。")]),_._v(" "),a("li",[_._v("删除冗余的Join。")]),_._v(" "),a("li",[_._v("子查询扁平化，尝试移除子查询，合并到主查询中。")]),_._v(" "),a("li",[_._v("计算常数并赋值。")])]),_._v(" "),a("ul",[a("li",[_._v("优化")])]),_._v(" "),a("p",[_._v("通常使用的是基于成本的优化（CBO）。\n最终生成一个相对较优的查询计划。")]),_._v(" "),a("ul",[a("li",[_._v("编译")])]),_._v(" "),a("p",[_._v("将查询计划编译为可执行的代码。")]),_._v(" "),a("ul",[a("li",[_._v("执行")])]),_._v(" "),a("p",[_._v("执行代码，与数据管理器交互，获取/写入数据。")]),_._v(" "),a("h3",{attrs:{id:"_1-3-存储管理器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-存储管理器"}},[_._v("#")]),_._v(" 1.3 存储管理器")]),_._v(" "),a("h4",{attrs:{id:"_1-3-1-缓存管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-1-缓存管理"}},[_._v("#")]),_._v(" 1.3.1 缓存管理")]),_._v(" "),a("ul",[a("li",[_._v("缓存读")])]),_._v(" "),a("p",[_._v("预读取，根据上一步的查询计划和统计监控可以预测查询需要磁盘上的哪些数据，在查询计算时就可以对磁盘中的数据进行预读取，读取到缓冲区中。")]),_._v(" "),a("p",[_._v("由于缓冲区不是无限大的，因此缓冲区中的数据需要经常刷新置换，而如果每次都清空缓冲区代价太大，因此需要有合适缓冲区置换算法来计算过期数据。")]),_._v(" "),a("p",[_._v("由一开始的 LRU (最近最少一次使用)到改进后对缓存数据加权的 LRU-K (最近最少k次使用)。")]),_._v(" "),a("ul",[a("li",[_._v("缓存写")])]),_._v(" "),a("p",[_._v("避免多次进行磁盘写入，所以写入操作也会先记录在缓冲区，再一次性批量刷入磁盘。")]),_._v(" "),a("h4",{attrs:{id:"_1-3-2-事务管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-2-事务管理"}},[_._v("#")]),_._v(" 1.3.2 事务管理")]),_._v(" "),a("h5",{attrs:{id:"_1-3-2-1-事务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-2-1-事务"}},[_._v("#")]),_._v(" 1.3.2.1 事务")]),_._v(" "),a("p",[_._v("ACID概念：")]),_._v(" "),a("ul",[a("li",[_._v("Atomicity 原子性：一个事务是一个基本的工作单元，一个工作单元内操作要么全部成功，要么全部失败。")]),_._v(" "),a("li",[_._v("Consistency 一致性：写入数据库的数据必须符合一致性约束。")]),_._v(" "),a("li",[_._v("Isolation 隔离性：两个事务同时提交互不影响结果。")]),_._v(" "),a("li",[_._v("Durability 持久性：事务一旦提交，数据修改是持久化生效的，即无论发生什么，改变都要保存到数据库。")])]),_._v(" "),a("h5",{attrs:{id:"_1-3-2-2-并发控制实现-aci"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-2-2-并发控制实现-aci"}},[_._v("#")]),_._v(" 1.3.2.2 并发控制实现 ACI")]),_._v(" "),a("p",[_._v("实现原子性、一致性、隔离性的难点在于处理对同一条数据进行操作的多个事务。")]),_._v(" "),a("p",[_._v("针对这种并发问题有如下几种常见的解决方式：")]),_._v(" "),a("ul",[a("li",[_._v("读写锁")])]),_._v(" "),a("p",[_._v("写操作加排他锁。")]),_._v(" "),a("p",[_._v("读操作加共享锁。")]),_._v(" "),a("p",[_._v("只有共享锁和共享锁不互斥，其他情况都是互斥的。")]),_._v(" "),a("ul",[a("li",[_._v("两段锁协议（Two-Phase Locking Protocol）")])]),_._v(" "),a("p",[_._v("把事务分为两个阶段：")]),_._v(" "),a("ul",[a("li",[_._v("成长阶段：只能获取锁")]),_._v(" "),a("li",[_._v("收缩阶段：只能释放锁")])]),_._v(" "),a("ul",[a("li",[_._v("乐观锁/版本控制")])]),_._v(" "),a("p",[_._v("不使用独占锁，而是通过当前版本号来对比各个事务中对应的版本号，相同就提交事务，不相同就回滚。类似 CAS 操作。")]),_._v(" "),a("ul",[a("li",[_._v("死锁？")])]),_._v(" "),a("p",[_._v("数据库处理死锁原理很简单，找到死锁，取消/回滚其中一个事务。")]),_._v(" "),a("h5",{attrs:{id:"_1-3-2-3-日志管理实现-d"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-2-3-日志管理实现-d"}},[_._v("#")]),_._v(" 1.3.2.3 日志管理实现 D")]),_._v(" "),a("p",[_._v("持久性要保证只要事务提交，数据就不会丢失。")]),_._v(" "),a("p",[_._v("造成这个问题的原因是数据库通常使用缓存来加速读写，而缓存是在系统内存中的，如果提交时断电/系统崩溃，内存中的数据就会丢失。")]),_._v(" "),a("p",[_._v("解决这个问题的一个办法是使用事务日志。")]),_._v(" "),a("ul",[a("li",[_._v("预写式日志（WAL）\n"),a("ul",[a("li",[_._v("保证每个事务写入磁盘前都要先写日志")]),_._v(" "),a("li",[_._v("保证每个事务的写入顺序与日志记录顺序相同")]),_._v(" "),a("li",[_._v("保证事务提交成功前已经记入日志")])])])]),_._v(" "),a("p",[_._v("当事务中进行一次修改操作时，经历以下5个步骤：")]),_._v(" "),a("ul",[a("li",[_._v("写入缓冲区")]),_._v(" "),a("li",[_._v("写入日志缓冲区")]),_._v(" "),a("li",[_._v("修改操作完成")]),_._v(" "),a("li",[_._v("从日志缓冲区写入日志文件")]),_._v(" "),a("li",[_._v("从缓冲区写入磁盘")])]),_._v(" "),a("p",[_._v("当一个事务提交成功时通常是完成了4/5 步骤，此时修改操作是一定记入了日志的。")]),_._v(" "),a("h2",{attrs:{id:"_2-一次-sql-查询的流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-一次-sql-查询的流程"}},[_._v("#")]),_._v(" 2. 一次 SQL 查询的流程")]),_._v(" "),a("p",[_._v("假设一个简单的查询场景，一个网络应用查询一个商品的库存数量：")]),_._v(" "),a("p",[_._v("1、应用调用JDBC等API与 DBMS 建立网络连接，将查询请求发送给 DBMS。\n2、DBMS 的客户端管理器接收到查询请求，进程管理器为此请求分配一个空闲的计算线程。\n3、计算线程中请求被传入关系查询处理器，经过鉴权/解析/优化/编译等流程，生成一个可执行的查询计划。\n4、将查询计划提交给存储管理器，通过并发控制保证事务的 ACID 属性，获取正确的库存数据。如果此查询还包括了其他修改操作，还需要写入事务日志。\n5、事务提交后将结果刷新到缓存（根据缓存策略不同），结果返回给关系查询处理器。\n6、关系查询处理器将结果组装成结果集，交由客户端管理器发送给客户端。")])])}),[],!1,null,null,null);v.default=l.exports}}]);