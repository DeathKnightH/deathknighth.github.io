(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{394:function(_,v,a){"use strict";a.r(v);var t=a(44),e=Object(t.a)({},(function(){var _=this,v=_.$createElement,a=_._self._c||v;return a("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[a("h1",{attrs:{id:"其他优化手段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他优化手段"}},[_._v("#")]),_._v(" 其他优化手段")]),_._v(" "),a("h2",{attrs:{id:"_1-数据库设计相关"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-数据库设计相关"}},[_._v("#")]),_._v(" 1. 数据库设计相关")]),_._v(" "),a("h3",{attrs:{id:"_1-1-选择合适的数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-选择合适的数据类型"}},[_._v("#")]),_._v(" 1.1 选择合适的数据类型")]),_._v(" "),a("ul",[a("li",[_._v("多用算术运算，少用字符串运算。")]),_._v(" "),a("li",[_._v("选取尽量小的类型。")]),_._v(" "),a("li",[_._v("尽量使用 "),a("code",[_._v("NOT NULL")]),_._v(" 声明列。")]),_._v(" "),a("li",[_._v("如果字符串列差异个数少，尽量考虑使用 "),a("code",[_._v("ENUM")]),_._v("。")]),_._v(" "),a("li",[_._v("定期使用 "),a("code",[_._v("OPTIMIZE TABLE")]),_._v(" 清理 InnoDB 和 MyISAM 引擎的表碎片。")]),_._v(" "),a("li",[_._v("可以将大量相关数据/结果过于复杂的数据压缩存储到 "),a("code",[_._v("BLOB")]),_._v(" 或 "),a("code",[_._v("TEXT")]),_._v(" 类型的列中，可以用单个检索查出所有数据。")]),_._v(" "),a("li",[_._v("可以将表中的 "),a("code",[_._v("BLOB")]),_._v("/"),a("code",[_._v("TEXT")]),_._v(" 列单独剥离出来作为一个单独的附表，可以提升主表其他数据的查询效率，也可以有效减小主表的表碎片和处理碎片的效率。")]),_._v(" "),a("li",[_._v('合理使用"合成索引"，比如使用表中几个强相关的列计算得到一个散列值列，作为索引列。')])]),_._v(" "),a("h3",{attrs:{id:"_1-2-选择合适的表存储类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-选择合适的表存储类型"}},[_._v("#")]),_._v(" 1.2 选择合适的表存储类型")]),_._v(" "),a("h4",{attrs:{id:"_1-2-1-列长度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-1-列长度"}},[_._v("#")]),_._v(" 1.2.1 列长度")]),_._v(" "),a("ul",[a("li",[_._v("MyISAM\n"),a("ul",[a("li",[_._v("CHAR：固定长度，空间占用高，处理速度快，不会产生大量表碎片，崩溃时易于重建。")]),_._v(" "),a("li",[_._v("VARCHAR： 不定长度，平均空间占用低，处理速度慢，会产生大量表碎片，崩溃时重建慢。")])])]),_._v(" "),a("li",[_._v("InnoDB\n"),a("ul",[a("li",[_._v("变长和固定长度的列没有性能差距，只有存储空间区别。"),a("code",[_._v("VARCHAR")]),_._v(" 平均占用空间小，在列中存在大量 "),a("code",[_._v("null")]),_._v(" 值时优势更明显，因为 "),a("code",[_._v("CHAR")]),_._v(" 类型的 "),a("code",[_._v("NULL")]),_._v(" 也会占用和其他非 null 值一样大的空间。")])])])]),_._v(" "),a("h4",{attrs:{id:"_1-2-2-行格式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-2-行格式"}},[_._v("#")]),_._v(" 1.2.2 行格式")]),_._v(" "),a("p",[_._v("在 InnoDB 中行格式也会影响查询效率，指定行格式：")]),_._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[_._v("CREATE TABLE table_name (define) ENGINE=InnoDB ROW_FORMAT=COMPRESSED;\n")])]),_._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[_._v("1")]),a("br")])]),a("p",[_._v("修改行格式：")]),_._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[_._v("ALTER TABLE table_name ROW_FORMAT=COMPRESSED;\n")])]),_._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[_._v("1")]),a("br")])]),a("ul",[a("li",[a("code",[_._v("COMPACT")]),_._v("：默认格式，适合绝大多数情景。")]),_._v(" "),a("li",[a("code",[_._v("COMPRESSED")]),_._v("：压缩格式，适合包含大量重复数据的表，占用空间小，读取数据快，会有额外的压缩/解压消耗（但远低于节省的读取时间）。")]),_._v(" "),a("li",[a("code",[_._v("DYNAMIC")]),_._v("：动态格式，适合表内有超长的 "),a("code",[_._v("TEXT")]),_._v("/"),a("code",[_._v("BLOB")]),_._v(" 数据。")])]),_._v(" "),a("p",[a("em",[_._v("ps:"),a("code",[_._v("COMPRESSED")]),_._v(" 和 "),a("code",[_._v("DYNAMIC")]),_._v(" 都需要 Barracuda 文件格式的支持，需要设置系统变量 "),a("code",[_._v("innodb_file_per_table")]),_._v(" 和 "),a("code",[_._v("innodb_file_format")])])]),_._v(" "),a("h3",{attrs:{id:"_1-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3"}},[_._v("#")]),_._v(" 1.3")]),_._v(" "),a("h2",{attrs:{id:"_2-应用相关"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-应用相关"}},[_._v("#")]),_._v(" 2. 应用相关")]),_._v(" "),a("h3",{attrs:{id:"_2-1-优化数据访问"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-优化数据访问"}},[_._v("#")]),_._v(" 2.1 优化数据访问")]),_._v(" "),a("h4",{attrs:{id:"_2-1-1-减少请求数据量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-1-减少请求数据量"}},[_._v("#")]),_._v(" 2.1.1 减少请求数据量")]),_._v(" "),a("ul",[a("li",[_._v("限制返回的列数：尽量不使用 "),a("code",[_._v("SELECT *")]),_._v(" 语句，只返回必要的列。")]),_._v(" "),a("li",[_._v("限制返回的行数：在非必要时不要返回大量行的结果集，使用 "),a("code",[_._v("LIMIT")]),_._v(" 子句限制每次查询返回的行数量。")]),_._v(" "),a("li",[_._v("缓存重复查询：把经常需要重复查询的数据放在缓存中，请求不进入数据库，减少重复查询的请求次数，能大幅提升性能。")])]),_._v(" "),a("h4",{attrs:{id:"_2-1-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-2"}},[_._v("#")]),_._v(" 2.1.2")])])}),[],!1,null,null,null);v.default=e.exports}}]);