(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{404:function(t,a,_){"use strict";_.r(a);var s=_(44),r=Object(s.a)({},(function(){var t=this,a=t.$createElement,_=t._self._c||a;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"设计模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#设计模式"}},[t._v("#")]),t._v(" 设计模式")]),t._v(" "),_("h2",{attrs:{id:"_1-是什么"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-是什么"}},[t._v("#")]),t._v(" 1. 是什么")]),t._v(" "),_("p",[t._v("设计模式(design patterns) 是一类经典的软件设计方案的总称，它不是一组特定的代码，而是一种解决问题的一般性概念，更像是方法论。")]),t._v(" "),_("h2",{attrs:{id:"_2-注意事项"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-注意事项"}},[t._v("#")]),t._v(" 2. 注意事项")]),t._v(" "),_("ul",[_("li",[t._v("设计模式不是 "),_("code",[t._v("银弹")]),t._v("，要根据项目需求和实际代码状况决定是否使用设计模式以及使用何种设计模式，不考虑具体条件使用只会导致更严重的问题。")]),t._v(" "),_("li",[t._v("多看看开源软件和 JDK 的源码，有时候会发现有些框架/api本身就是基于某种设计模式实现的，不用画蛇添足自己再在外层封装。")]),t._v(" "),_("li",[t._v("不需要完全严格遵守某一个特定的设计模式，设计模式是一类解决方案，方案细节是可以随实际情况修改的，使用设计模式的初衷是让代码更灵活、高效，照本宣科地完整使用一个设计模式有时候并不符合预期。")])]),t._v(" "),_("h2",{attrs:{id:"_3-设计模式分类"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-设计模式分类"}},[t._v("#")]),t._v(" 3. 设计模式分类")]),t._v(" "),_("p",[t._v("目前常用的设计模式可以分为3类：")]),t._v(" "),_("ul",[_("li",[t._v("创建型模式：提供对象创建的机制，增加已有代码的灵活性和可复用性。")]),t._v(" "),_("li",[t._v("结构型模式：将对象和类组装成大型的结构，同时保证结构的灵活和高效。")]),t._v(" "),_("li",[t._v("行为模式：保证对象间的高效沟通和职责委派。")])])])}),[],!1,null,null,null);a.default=r.exports}}]);