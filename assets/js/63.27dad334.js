(window.webpackJsonp=window.webpackJsonp||[]).push([[63],{421:function(e,t,a){"use strict";a.r(t);var s=a(44),r=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"线程池"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程池"}},[e._v("#")]),e._v(" 线程池")]),e._v(" "),a("h2",{attrs:{id:"_1-池化的意义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-池化的意义"}},[e._v("#")]),e._v(" 1.  池化的意义")]),e._v(" "),a("p",[e._v("能对有限的资源进行统一分配、监控、调优。")]),e._v(" "),a("p",[e._v("特定于"),a("code",[e._v("线程池")]),e._v("有以下3个优点：")]),e._v(" "),a("ul",[a("li",[e._v("降低资源消耗，不用频繁地创建/销毁线程。")]),e._v(" "),a("li",[e._v("提高响应速度，因为使用时大多数情况不用创建线程，而是使用已有的线程。")]),e._v(" "),a("li",[e._v("提高线程的可管理性，统一在池内管理。")])]),e._v(" "),a("p",[e._v("类似的还有数据库连接池。")]),e._v(" "),a("h2",{attrs:{id:"_2-executors-创建线程池的缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-executors-创建线程池的缺点"}},[e._v("#")]),e._v(" 2. Executors 创建线程池的缺点")]),e._v(" "),a("p",[e._v("Executors 类提供了几种特定的线程池实现，但是他们各有缺点：")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("newFixedThreadPool")]),e._v(" "),a("p",[e._v("使用了"),a("code",[e._v("无界队列")]),e._v("作为工作队列(即队列容量为 Integer.MAX_VALUE)，这样会导致线程池内的线程数永远不会超过 coreSize，而且线程池的拒绝策略也会失效，提交任何数量的 task 都不会拒绝，很容易造成工作队列过大而 OOM。")])]),e._v(" "),a("li",[a("p",[e._v("newSingleThreadExecutor")]),e._v(" "),a("p",[e._v("只有一个可用线程，相当于单线程顺序执行任务，而且工作队列也是无界队列，缺点和 newFixedThreadPool 类似。")])]),e._v(" "),a("li",[a("p",[e._v("newCacheThreadPool")]),e._v(" "),a("p",[e._v("最大线程数为 Integer.MAX_VALUE，会导致大量创建线程，甚至OOM。")])]),e._v(" "),a("li",[a("p",[e._v("newWorkStealingPool")]),e._v(" "),a("p",[e._v("1.8 新增，主要是创建 Fork/Join Pool。")])]),e._v(" "),a("li",[a("p",[e._v("newScheduledThreadPool")])]),e._v(" "),a("li",[a("p",[e._v("newSingleThreadScheduledExecutor")])])]),e._v(" "),a("h2",{attrs:{id:"_3-使用-threadpoolexecutor-创建线程池"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-使用-threadpoolexecutor-创建线程池"}},[e._v("#")]),e._v(" 3. 使用 ThreadPoolExecutor 创建线程池")]),e._v(" "),a("h3",{attrs:{id:"_3-1-构造参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-构造参数"}},[e._v("#")]),e._v(" 3.1 构造参数")]),e._v(" "),a("p",[e._v("总共有7个可输入参数：")]),e._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("int")]),e._v(" corePoolSize\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 核心线程数")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("int")]),e._v(" maximumPoolSize\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 最大线程数")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("long")]),e._v(" keepAliveTime\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 线程存活时间数值")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("TimeUnit")]),e._v(" unit\t\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 存活时间单位")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("BlockingQueue")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Runnable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v(" workQueue\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 工作队列")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("ThreadFactory")]),e._v(" threadFactory\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 线程工厂")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("RejectedExecutionHandler")]),e._v(" handler\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 拒绝策略")]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br")])]),a("ul",[a("li",[a("p",[e._v("corePoolSize 核心线程数和 maximumPoolSize 最大线程数")]),e._v(" "),a("p",[e._v("这两个参数的具体作用参见 [3.2 execute 原理](#3.2 execute 原理)")])]),e._v(" "),a("li",[a("p",[e._v("keepAliveTime 线程存活时间和 unit 存活时间单位")]),e._v(" "),a("p",[e._v("当前存活的线程数大于 corePoolSize 时，空闲线程的存活时间。而 unit 则是这个时间的单位。")]),e._v(" "),a("p",[e._v("超过这个时间，且总线程数量大于 corePoolSize，空闲线程将被终止。")])]),e._v(" "),a("li",[a("p",[e._v("workQueue 工作队列")]),e._v(" "),a("p",[e._v("是一个 BlockingQueue 阻塞队列，JDK 里有一些具体的实现。")]),e._v(" "),a("p",[e._v("也可以自定义工作队列。")])]),e._v(" "),a("li",[a("p",[e._v("threadFactory 线程工厂")]),e._v(" "),a("p",[e._v("线程池内部创建线程的工厂，通常使用默认工厂，即 "),a("code",[e._v("Executors.defaultThreadFactory()")]),e._v("。")]),e._v(" "),a("p",[e._v("也可以自定义线程工厂，比如自定义线程创建时的名字，便于日志监控。")])]),e._v(" "),a("li",[a("p",[e._v("handler 拒绝策略")]),e._v(" "),a("p",[e._v("当工作队列满且线程池内总线程数已达到最大线程数时，继续提交任务会触发拒绝策略，有4种 JDK 内置的策略：")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("AbortPolicy")]),e._v("  默认策略，直接抛出 "),a("code",[e._v("RejectedExecutionException")]),e._v(" 异常。")]),e._v(" "),a("li",[a("code",[e._v("DiscardPolicy")]),e._v("  什么都不做，直接丢弃新提交的任务。")]),e._v(" "),a("li",[a("code",[e._v("DiscardOldestPolicy")]),e._v("  丢弃工作队列里最早的未执行任务，然后重试提交。")]),e._v(" "),a("li",[a("code",[e._v("CallerRunsPolicy")]),e._v("  用当前提交任务的线程直接调用 "),a("code",[e._v("run")]),e._v(" 来执行任务。")])]),e._v(" "),a("p",[e._v("也可以自定义拒绝策略。")])])]),e._v(" "),a("h3",{attrs:{id:"_3-2-工作原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-工作原理"}},[e._v("#")]),e._v(" 3.2 工作原理")]),e._v(" "),a("p",[e._v("假设核心线程数为"),a("code",[e._v("n")]),e._v("，最大线程数为 "),a("code",[e._v("max")]),e._v("：")]),e._v(" "),a("p",[a("img",{attrs:{src:"threadpool.assets/image-20210711111306283.png",alt:"image-20210711111306283"}})]),e._v(" "),a("h3",{attrs:{id:"_3-3-内部实现分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-内部实现分析"}},[e._v("#")]),e._v(" 3.3 内部实现分析")]),e._v(" "),a("p",[e._v("​\t除了以上7个构造参数，ThreadPoolExecutor 内部还有几个关键的成员：")]),e._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("private")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("final")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("AtomicInteger")]),e._v(" ctl "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("new")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("AtomicInteger")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("ctlOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("RUNNING"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("  \t"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 前3位标识线程池状态，后29位表示 worker 线程数量")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("private")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("final")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("HashSet")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Worker")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v(" workers "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("new")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("HashSet")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Worker")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" \t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// worker 线程集合")]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])]),a("ul",[a("li",[a("p",[e._v("线程池状态")]),e._v(" "),a("ul",[a("li",[e._v("RUNNING (-1，即111):  正常运行状态，接收新任务，并且会处理工作队列里的任务。")]),e._v(" "),a("li",[e._v("SHUTDOWN (0，即000): 关闭状态，不接受新任务，但是还是会处理工作队列里的任务。")]),e._v(" "),a("li",[e._v("STOP (1，即001):     停止状态，不接受新任务，不处理工作队列里的任务，而且会中断所有正在执行的任务。")]),e._v(" "),a("li",[e._v("TIDYING (2，即010):  所有任务均已终止，worker set为空，没有存活的 worker 线程，将马上执行 "),a("code",[e._v("terminated()")]),e._v("方法。")]),e._v(" "),a("li",[e._v("TERMINATED (3, 即011):  "),a("code",[e._v("terminated()")]),e._v("方法已执行完毕。")])]),e._v(" "),a("p",[e._v("状态转移流程如下图：")]),e._v(" "),a("p",[a("img",{attrs:{src:"threadpool.assets/image-20210711144308678.png",alt:"image-20210711144308678"}})])]),e._v(" "),a("li",[a("p",[e._v("worker 线程")]),e._v(" "),a("p",[e._v("继承自 "),a("code",[e._v("AbstractQueuedSynchronizer")]),e._v("，并实现了 Runnable 接口，所以一个 "),a("code",[e._v("Worker")]),e._v(" 对象既是一个线程，又是一个同步器。")])]),e._v(" "),a("li",[a("p",[e._v("提交任务时")]),e._v(" "),a("p",[a("img",{attrs:{src:"threadpool.assets/image-20210711161037180.png",alt:"image-20210711161037180"}})])]),e._v(" "),a("li",[a("p",[e._v("执行任务时")]),e._v(" "),a("p",[a("code",[e._v("Worker")]),e._v(" 对象内部调用 "),a("code",[e._v("runWorker()")]),e._v("方法，如果 "),a("code",[e._v("Worker")]),e._v(" 在新建时就包含一个 FirstTask，那么执行这个 task，否则使用线程池的 "),a("code",[e._v("getTask()")]),e._v(" 方法从工作队列中获取一个 task来执行。")]),e._v(" "),a("p",[e._v("执行 task 前调用 "),a("code",[e._v("Worker")]),e._v(" 的 "),a("code",[e._v("lock()")]),e._v(" 方法，"),a("code",[e._v("Worker")]),e._v(" 实现的同步器是一个互斥的且不可重入的锁，这个不可重入锁可以在调用 tryAcquire() 时准确判断 "),a("code",[e._v("Worker")]),e._v(" 的运行状态。")]),e._v(" "),a("ul",[a("li",[e._v("返回false，表示有任务在运行。")]),e._v(" "),a("li",[e._v("返回true，表示 "),a("code",[e._v("Worker")]),e._v(" 处于空闲状态。")])]),e._v(" "),a("p",[e._v("然后判断线程池状态，如果此时线程池为 STOP 状态，就马上中断当前 worker 线程；否则就开始执行 task。")]),e._v(" "),a("p",[e._v("task 执行完毕后调用 "),a("code",[e._v("unlock()")]),e._v("解锁，此时"),a("code",[e._v("Worker")]),e._v(" 又回到了空闲状态。")])]),e._v(" "),a("li",[a("p",[e._v("关闭线程池")]),e._v(" "),a("p",[e._v("有两个关闭方法：")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("shutdown()")]),e._v(" 将线程状态 "),a("code",[e._v("clt")]),e._v(" 设置为 SHUTDOWN，中断没有执行任务的线程。")]),e._v(" "),a("li",[a("code",[e._v("shutdownNow()")]),e._v(" 将线程状态"),a("code",[e._v("clt")]),e._v("设置为STOP，并遍历内部所有线程，将不处于中断状态的线程全部中断，并将 "),a("code",[e._v("workQueue")]),e._v(" 中剩余的任务放入一个新 List 并返回这个 List。")])]),e._v(" "),a("p",[e._v("当执行了任意一个 shutdown 方法后，"),a("code",[e._v("isShutDown()")]),e._v(" 将返回 "),a("code",[e._v("true")]),e._v("。当所有线程均已关闭，且工作队列为空时，"),a("code",[e._v("isTerminated()")]),e._v("返回 "),a("code",[e._v("true")]),e._v("。")]),e._v(" "),a("p",[e._v("需要注意，调用完 "),a("code",[e._v("shutdown()")]),e._v("方法后不一定会马上"),a("code",[e._v("terminated")]),e._v("，要等待工作队列里的任务全部执行完。")])])]),e._v(" "),a("h2",{attrs:{id:"_4-使用-scheduledthreadpoolexecutor-创建线程池"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-使用-scheduledthreadpoolexecutor-创建线程池"}},[e._v("#")]),e._v(" 4. 使用 ScheduledThreadPoolExecutor 创建线程池")]),e._v(" "),a("p",[e._v("​\t"),a("code",[e._v("ScheduledThreadPoolExecutor")]),e._v(" 继承自 "),a("code",[e._v("ThreadPoolExecutor")]),e._v("，为任务提供延迟或周期执行，属于线程池的一种。")]),e._v(" "),a("h3",{attrs:{id:"_4-1-与-threadpoolexecutor-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-与-threadpoolexecutor-的区别"}},[e._v("#")]),e._v(" 4.1 与 ThreadPoolExecutor 的区别")]),e._v(" "),a("ul",[a("li",[e._v("构造参数最多只接受 3 个，核心线程数、ThreadFactory、RejectedExecutionHandler，最大线程数固定为 Integer.MAX_VALUE，存活时间固定为 0，工作队列固定为一个空的 "),a("code",[e._v("DelayedWorkQueue")]),e._v("。")]),e._v(" "),a("li",[e._v("使用 "),a("code",[e._v("ScheduledFutureTask")]),e._v("  执行周期任务，所有任务都被封装为一个 "),a("code",[e._v("ScheduledFutureTask")]),e._v("  。")])]),e._v(" "),a("h2",{attrs:{id:"_5-fork-join-框架"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-fork-join-框架"}},[e._v("#")]),e._v(" 5. Fork/Join 框架")]),e._v(" "),a("h2",{attrs:{id:"_6-实战"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-实战"}},[e._v("#")]),e._v(" 6. 实战")])])}),[],!1,null,null,null);t.default=r.exports}}]);