(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{413:function(a,_,t){"use strict";t.r(_);var v=t(44),r=Object(v.a)({},(function(){var a=this,_=a.$createElement,t=a._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"jvm-内存结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jvm-内存结构"}},[a._v("#")]),a._v(" JVM 内存结构")]),a._v(" "),t("h2",{attrs:{id:"_0-概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_0-概念"}},[a._v("#")]),a._v(" 0. 概念")]),a._v(" "),t("p",[a._v("不同于"),t("code",[a._v("内存模型")]),a._v("，内存结构通常指的是 JVM 的运行时数据区。")]),a._v(" "),t("p",[a._v("根据虚拟机规范，运行时数据区分为两类：")]),a._v(" "),t("ul",[t("li",[a._v("线程私有：程序计数器，虚拟机栈，本地方法栈")]),a._v(" "),t("li",[a._v("线程共享：堆，方法区")])]),a._v(" "),t("h2",{attrs:{id:"_1-程序计数器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-程序计数器"}},[a._v("#")]),a._v(" 1. 程序计数器")]),a._v(" "),t("p",[a._v("程序计数器（Program Counter Register），是物理寄存器的一种抽象实现。")]),a._v(" "),t("h3",{attrs:{id:"_1-1-作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-作用"}},[a._v("#")]),a._v(" 1.1 作用")]),a._v(" "),t("p",[a._v("程序计数器是程序控制流的指示器，分支、循环、跳转、")]),a._v(" "),t("ul",[t("li",[a._v("如果当前线程正在执行的是 Java 方法，那么计数器记录的是下一个执行的字节码地址")]),a._v(" "),t("li",[a._v("如果当前线程正在执行的是 native 方法，那么计数器记录的是 undefined")])]),a._v(" "),t("h3",{attrs:{id:"_1-2-总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-总结"}},[a._v("#")]),a._v(" 1.2 总结")]),a._v(" "),t("ul",[t("li",[a._v("程序计数器占用内存小，运行速度快，且是唯一一个没有规定 OutOfMemoryError 的区域。")]),a._v(" "),t("li",[a._v("属于每个线程私有，生命周期与所属的线程相同。")])]),a._v(" "),t("h2",{attrs:{id:"_2-虚拟机栈"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-虚拟机栈"}},[a._v("#")]),a._v(" 2. 虚拟机栈")]),a._v(" "),t("p",[a._v("Java 虚拟机栈（Java Virtual Machine Stack）内部保存的是栈帧（Stack Frame），每个栈帧对应了一次方法调用。")]),a._v(" "),t("h3",{attrs:{id:"_2-1-作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-作用"}},[a._v("#")]),a._v(" 2.1 作用")]),a._v(" "),t("p",[a._v("主管 Java 程序的运行，保存方法的局部变量、部分结果，并参与方法的调用、返回。")]),a._v(" "),t("h3",{attrs:{id:"_2-2-存储单位"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-存储单位"}},[a._v("#")]),a._v(" 2.2 存储单位")]),a._v(" "),t("p",[a._v("栈帧是虚拟机栈的存储单位，栈帧是一个内存区块，存储着方法执行过程中的各种数据，包括：")]),a._v(" "),t("ul",[t("li",[a._v("局部变量表（Local Variables）")]),a._v(" "),t("li",[a._v("操作数栈（Operand Stack）")]),a._v(" "),t("li",[a._v("动态链接（Dynamic Linking）：指向运行时常量池的方法引用")]),a._v(" "),t("li",[a._v("方法返回地址（Return Address）：方法退出的地址")]),a._v(" "),t("li",[a._v("附加信息：方法调用附加信息，依赖 JVM 的具体实现")])]),a._v(" "),t("h4",{attrs:{id:"_2-2-1-局部变量表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-1-局部变量表"}},[a._v("#")]),a._v(" 2.2.1 局部变量表")]),a._v(" "),t("p",[a._v("是一组变量值存储空间，存储方法参数和局部变量。")]),a._v(" "),t("ul",[t("li",[a._v("存储的单位是 slot，32位及以下的变量占1个slot，64位占2个slot。")]),a._v(" "),t("li",[a._v("局部变量表中存储的变量也是一种 GCRoots，在垃圾回收的可达性分析时起到重要作用。")])]),a._v(" "),t("h4",{attrs:{id:"_2-2-2-操作数栈"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-2-操作数栈"}},[a._v("#")]),a._v(" 2.2.2 操作数栈")]),a._v(" "),t("p",[a._v("操作数栈是一个后进先出（LIFO）的表达式栈（Expression Stack），主要用于存储计算过程中的中间结果和临时变量。")]),a._v(" "),t("h4",{attrs:{id:"_2-2-3-动态链接"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-3-动态链接"}},[a._v("#")]),a._v(" 2.2.3 动态链接")]),a._v(" "),t("p",[a._v("Java 源文件在编译时会把变量和方法引用转换为符号引用放到 class 文件的常量池中，在 JVM 中实际调用的时候需要动态链接将符号引用转换为直接引用。")]),a._v(" "),t("h4",{attrs:{id:"_2-2-4-方法返回地址"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-4-方法返回地址"}},[a._v("#")]),a._v(" 2.2.4 方法返回地址")]),a._v(" "),t("p",[a._v("Java 的方法退出有两种情况：")]),a._v(" "),t("ul",[t("li",[a._v("正常执行完成退出")]),a._v(" "),t("li",[a._v("执行过程中出现未处理的异常，非正常退出")])]),a._v(" "),t("p",[a._v("无论以哪种方式退出方法，都会返回到方法调用的地方。正常退出，返回地址是调用者的程序计数器的值；非正常退出，返回地址通过异常表来确定，不存储在栈帧中。")]),a._v(" "),t("h4",{attrs:{id:"_2-2-5-附加信息"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-5-附加信息"}},[a._v("#")]),a._v(" 2.2.5 附加信息")]),a._v(" "),t("p",[a._v("可能会有一些虚拟机实现相关的附加信息，比如对程序调试提供支持的信息，但这不是规范，带不带或者带什么信息取决于具体的 JVM 实现。")])])}),[],!1,null,null,null);_.default=r.exports}}]);