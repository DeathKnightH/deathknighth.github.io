(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{420:function(_,v,t){"use strict";t.r(v);var a=t(44),r=Object(a.a)({},(function(){var _=this,v=_.$createElement,t=_._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h1",{attrs:{id:"jvm-内存结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jvm-内存结构"}},[_._v("#")]),_._v(" JVM 内存结构")]),_._v(" "),t("h2",{attrs:{id:"_0-概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_0-概念"}},[_._v("#")]),_._v(" 0. 概念")]),_._v(" "),t("p",[_._v("不同于"),t("code",[_._v("内存模型")]),_._v("，内存结构通常指的是 JVM 的运行时数据区。")]),_._v(" "),t("p",[_._v("根据虚拟机规范，运行时数据区分为两类：")]),_._v(" "),t("ul",[t("li",[_._v("线程私有：程序计数器，虚拟机栈，本地方法栈")]),_._v(" "),t("li",[_._v("线程共享：堆，方法区")])]),_._v(" "),t("h2",{attrs:{id:"_1-程序计数器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-程序计数器"}},[_._v("#")]),_._v(" 1. 程序计数器")]),_._v(" "),t("p",[_._v("程序计数器（Program Counter Register），是物理寄存器的一种抽象实现。")]),_._v(" "),t("h3",{attrs:{id:"_1-1-作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-作用"}},[_._v("#")]),_._v(" 1.1 作用")]),_._v(" "),t("p",[_._v("程序计数器是程序控制流的指示器，分支、循环、跳转、")]),_._v(" "),t("ul",[t("li",[_._v("如果当前线程正在执行的是 Java 方法，那么计数器记录的是下一个执行的字节码地址")]),_._v(" "),t("li",[_._v("如果当前线程正在执行的是 native 方法，那么计数器记录的是 undefined")])]),_._v(" "),t("h3",{attrs:{id:"_1-2-总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-总结"}},[_._v("#")]),_._v(" 1.2 总结")]),_._v(" "),t("ul",[t("li",[_._v("程序计数器占用内存小，运行速度快，且是唯一一个没有规定 OutOfMemoryError 的区域。")]),_._v(" "),t("li",[_._v("属于每个线程私有，生命周期与所属的线程相同。")])]),_._v(" "),t("h2",{attrs:{id:"_2-虚拟机栈"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-虚拟机栈"}},[_._v("#")]),_._v(" 2. 虚拟机栈")]),_._v(" "),t("p",[_._v("Java 虚拟机栈（Java Virtual Machine Stack）内部保存的是栈帧（Stack Frame），每个栈帧对应了一次方法调用。")]),_._v(" "),t("h3",{attrs:{id:"_2-1-作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-作用"}},[_._v("#")]),_._v(" 2.1 作用")]),_._v(" "),t("p",[_._v("主管 Java 程序的运行，保存方法的局部变量、部分结果，并参与方法的调用、返回。")]),_._v(" "),t("h3",{attrs:{id:"_2-2-存储单位"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-存储单位"}},[_._v("#")]),_._v(" 2.2 存储单位")]),_._v(" "),t("p",[_._v("栈帧是虚拟机栈的存储单位，栈帧是一个内存区块，存储着方法执行过程中的各种数据，包括：")]),_._v(" "),t("ul",[t("li",[_._v("局部变量表（Local Variables）")]),_._v(" "),t("li",[_._v("操作数栈（Operand Stack）")]),_._v(" "),t("li",[_._v("动态链接（Dynamic Linking）：指向运行时常量池的方法引用")]),_._v(" "),t("li",[_._v("方法返回地址（Return Address）：方法退出的地址")]),_._v(" "),t("li",[_._v("附加信息：方法调用附加信息，依赖 JVM 的具体实现")])]),_._v(" "),t("h4",{attrs:{id:"_2-2-1-局部变量表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-1-局部变量表"}},[_._v("#")]),_._v(" 2.2.1 局部变量表")]),_._v(" "),t("p",[_._v("是一组变量值存储空间，存储方法参数和局部变量。")]),_._v(" "),t("ul",[t("li",[_._v("存储的单位是 slot，32位及以下的变量占1个slot，64位占2个slot。")]),_._v(" "),t("li",[_._v("局部变量表中存储的变量也是一种 GCRoots，在垃圾回收的可达性分析时起到重要作用。")])]),_._v(" "),t("h4",{attrs:{id:"_2-2-2-操作数栈"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-2-操作数栈"}},[_._v("#")]),_._v(" 2.2.2 操作数栈")]),_._v(" "),t("p",[_._v("操作数栈是一个后进先出（LIFO）的表达式栈（Expression Stack），主要用于存储计算过程中的中间结果和临时变量。")]),_._v(" "),t("h4",{attrs:{id:"_2-2-3-动态链接"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-3-动态链接"}},[_._v("#")]),_._v(" 2.2.3 动态链接")]),_._v(" "),t("p",[_._v("Java 源文件在编译时会把变量和方法引用转换为符号引用放到 class 文件的常量池中，在 JVM 中实际调用的时候需要动态链接将符号引用转换为直接引用。")]),_._v(" "),t("h4",{attrs:{id:"_2-2-4-方法返回地址"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-4-方法返回地址"}},[_._v("#")]),_._v(" 2.2.4 方法返回地址")]),_._v(" "),t("p",[_._v("Java 的方法退出有两种情况：")]),_._v(" "),t("ul",[t("li",[_._v("正常执行完成退出")]),_._v(" "),t("li",[_._v("执行过程中出现未处理的异常，非正常退出")])]),_._v(" "),t("p",[_._v("无论以哪种方式退出方法，都会返回到方法调用的地方。正常退出，返回地址是调用者的程序计数器的值；非正常退出，返回地址通过异常表来确定，不存储在栈帧中。")]),_._v(" "),t("h4",{attrs:{id:"_2-2-5-附加信息"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-5-附加信息"}},[_._v("#")]),_._v(" 2.2.5 附加信息")]),_._v(" "),t("p",[_._v("可能会有一些虚拟机实现相关的附加信息，比如对程序调试提供支持的信息，但这不是规范，带不带或者带什么信息取决于具体的 JVM 实现。")]),_._v(" "),t("h2",{attrs:{id:"_3-本地方法栈"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-本地方法栈"}},[_._v("#")]),_._v(" 3. 本地方法栈")]),_._v(" "),t("p",[_._v("本地方法栈（Native Method Stack）是用于管理本地方法运行的栈。")]),_._v(" "),t("ul",[t("li",[_._v("native 方法可以通过虚拟机提供的接口操作/访问虚拟机运行时数据区，包括程序计数器和堆等。")]),_._v(" "),t("li",[_._v("HotSpot JVM 中本地方法栈和虚拟机栈是同一片内存区域。")]),_._v(" "),t("li",[_._v("不是所有 JVM 都支持本地方法，虚拟机规范中并没有规定本地方法栈的具体实现语言、数据结构、实现方式等，所以不支持本地方法的JVM可以不实现本地方法栈。")])]),_._v(" "),t("h2",{attrs:{id:"_4-堆"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-堆"}},[_._v("#")]),_._v(" 4. 堆")]),_._v(" "),t("p",[_._v("堆（Heap）是绝大多数 Java 应用在运行时管理的最大的一块内存区域，被所有线程共享，用于存放绝大多数对象实例。")]),_._v(" "),t("h3",{attrs:{id:"_4-1-堆内存划分"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-堆内存划分"}},[_._v("#")]),_._v(" 4.1 堆内存划分")]),_._v(" "),t("p",[_._v("为了更好地执行 GC，HotSpot JVM 对堆内存进行了划分，逻辑上分为 3 类：")]),_._v(" "),t("ul",[t("li",[_._v("新生代：新申请的对象和没有达到年龄的对象都在新生代。")]),_._v(" "),t("li",[_._v("老年代：长时间被使用且达到一定年龄还没有被回收的对象都在老年代。")]),_._v(" "),t("li",[_._v("元空间（Java 8 之前实现是永久代）：存储类信息、常量池、静态变量、JIT编译后的代码缓存等数据，是 JVM 规范中方法区的实际实现。")])]),_._v(" "),t("h4",{attrs:{id:"_4-1-1-新生代-young-generation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-1-新生代-young-generation"}},[_._v("#")]),_._v(" 4.1.1 新生代（Young Generation）")]),_._v(" "),t("p",[_._v("大多数对象新建时都在新生代中，在 HotSpot 中新生代又分为3个部分，一个 Eden Memory 和两个 Survivor memory，默认大小比例为 8:1:1：")]),_._v(" "),t("ul",[t("li",[_._v("Eden：大多数新建对象都在 Eden 区，当 Eden 区满时执行 Minor GC，将幸存者移动到 Survivor 区，对象年龄 +1。")]),_._v(" "),t("li",[_._v("Survivor：执行 Minor GC 时也会回收 Survivor 区的对象并将幸存者移动到另一个 Survivor 区，对象年龄 +1。因此同一时间总有一个 Survivor 区是空的。")])]),_._v(" "),t("p",[_._v("经过多次 Minor GC 仍然存活的对象会被移动到老年代，判断依据一般是对象年龄超过了 "),t("code",[_._v("-XX:PetenureSizeThreshold")]),_._v(" 设置的值（默认是 15）。")]),_._v(" "),t("p",[_._v("可以通过以下参数设置新生代的大小：")]),_._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("-Xmn          # 直接设置整个新生代的大小\n-XX:NewRatio  # 老年代与新生代大小的比例，比如设置为 4 就是 `老：新 = 4 ：1`\n-XX:SurvivorRatio # 新生代中 Eden 区和单个 Survivor 区大小的比例，比如设置为 8 就是 `Eden : Survivor = 8 : 1`\n")])]),_._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[_._v("1")]),t("br"),t("span",{staticClass:"line-number"},[_._v("2")]),t("br"),t("span",{staticClass:"line-number"},[_._v("3")]),t("br")])]),t("h4",{attrs:{id:"_4-1-2-老年代-old-generation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-2-老年代-old-generation"}},[_._v("#")]),_._v(" 4.1.2 老年代（Old Generation）")]),_._v(" "),t("p",[_._v("老年代中一般存储两类对象：")]),_._v(" "),t("ul",[t("li",[_._v("大对象，需要大量连续内存空间的对象会直接进入老年代，防止在 Eden 区和 Survivor 区之间发生大量内存拷贝。")]),_._v(" "),t("li",[_._v("经过多轮 Minor GC 仍然存活（默认 15 次）的对象也会进入老年代。")])]),_._v(" "),t("p",[_._v("老年代内存满时会进行 Major GC。")]),_._v(" "),t("p",[_._v("可以通过以下参数设置老年代的大小：")]),_._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("-XX:NewRatio  # 老年代与新生代大小的比例，比如设置为 4 就是 `老：新 = 4 ：1`\n")])]),_._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[_._v("1")]),t("br")])]),t("h4",{attrs:{id:"_4-1-3-永久代-元空间-方法区"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-3-永久代-元空间-方法区"}},[_._v("#")]),_._v(" 4.1.3 永久代/元空间/方法区")]),_._v(" "),t("p",[_._v("从虚拟机规范的逻辑分类上说，方法区是堆的一部分，但是实际实现时，方法区为 non-heap，并不和堆一起管理。")]),_._v(" "),t("h3",{attrs:{id:"_4-2-设置参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-设置参数"}},[_._v("#")]),_._v(" 4.2 设置参数")]),_._v(" "),t("table",[t("thead",[t("tr",[t("th",[_._v("参数")]),_._v(" "),t("th",[_._v("含义")]),_._v(" "),t("th",[_._v("默认值")]),_._v(" "),t("th",[_._v("特性")])])]),_._v(" "),t("tbody",[t("tr",[t("td",[_._v("-Xms 或 -XX:InitialHeapSize")]),_._v(" "),t("td",[_._v("初始堆内存大小")]),_._v(" "),t("td",[_._v("物理内存的 1/64")]),_._v(" "),t("td",[_._v("默认(MinHeapFreeRatio参数，可以调整)空余堆内存小于40%时，JVM就会增大堆直到-Xmx的最大限制")])]),_._v(" "),t("tr",[t("td",[_._v("-Xmx 或 -XX:MaxHeapSize")]),_._v(" "),t("td",[_._v("最大堆内存")]),_._v(" "),t("td",[_._v("物理内存的 1/4")]),_._v(" "),t("td",[_._v("默认(MaxHeapFreeRatio参数，可以调整)空余堆内存大于70%时，JVM会减少堆直到 -Xms的最小限制")])]),_._v(" "),t("tr",[t("td",[_._v("-Xmn")]),_._v(" "),t("td",[_._v("新生代内存大小")]),_._v(" "),t("td"),_._v(" "),t("td",[_._v("这个参数不会超过最大堆大小，也不会改变堆的总大小，因此这个参数越大，老年代内存区域就越小")])]),_._v(" "),t("tr",[t("td",[_._v("-XX:NewRatio")]),_._v(" "),t("td",[_._v("堆中老年代和新生代相对占比")]),_._v(" "),t("td",[_._v("2")]),_._v(" "),t("td",[_._v("老年代大小 ：新生代大小，但是如果开启（Java 8 默认开启） "),t("code",[_._v("-XX:+UseAdaptiveSizePolicy")]),_._v(" 则 JVM 会动态调整各个区域的大小比例，此参数就无效了")])]),_._v(" "),t("tr",[t("td",[_._v("-XX:SurvivorRatio")]),_._v(" "),t("td",[_._v("新生代中 Eden 和 Survivor 相对占比")]),_._v(" "),t("td",[_._v("8")]),_._v(" "),t("td",[_._v("Eden：Survivor，这里只表示单个 Survivor 大小，同样的如果开启（Java 8 默认开启） "),t("code",[_._v("-XX:+UseAdaptiveSizePolicy")]),_._v(" 则此参数无效")])]),_._v(" "),t("tr",[t("td",[_._v("-XX:MaxTenuringThreshold")]),_._v(" "),t("td",[_._v("新生代最大年龄")]),_._v(" "),t("td",[_._v("15")]),_._v(" "),t("td",[_._v("新生代的对象，无论在 Eden 还是 Survivor，只要经历一次 Minor GC 并存活，年龄就 +1，达到配置最大值还存活就移到老年代（如果设置为 0，直接进入老年代）")])]),_._v(" "),t("tr",[t("td",[_._v("-XX:PretenureSizeThreshold")]),_._v(" "),t("td",[_._v("直接分配到老年代的对象大小")]),_._v(" "),t("td",[_._v("0")]),_._v(" "),t("td",[_._v("单位是字节")])])])]),_._v(" "),t("h3",{attrs:{id:"_4-3-hotspot-堆内垃圾回收简单分类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-hotspot-堆内垃圾回收简单分类"}},[_._v("#")]),_._v(" 4.3 HotSpot 堆内垃圾回收简单分类")]),_._v(" "),t("p",[_._v("大致分为两大类，部分回收（Partial GC）和整堆回收（Full GC），其中部分回收还可以细分：")]),_._v(" "),t("ul",[t("li",[_._v("部分回收：\n"),t("ul",[t("li",[_._v("新生代 Minor GC")]),_._v(" "),t("li",[_._v("老年代 Major GC，目前只有 CMS GC 会单独进行 Major GC")]),_._v(" "),t("li",[_._v("混合回收：全部新生代和部分老年代，HotSpot 中只有 G1 收集器会执行混合回收")])])])]),_._v(" "),t("h3",{attrs:{id:"_4-4-tlab-thread-local-allocation-buffer"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-tlab-thread-local-allocation-buffer"}},[_._v("#")]),_._v(" 4.4 TLAB（Thread Local Allocation Buffer）")]),_._v(" "),t("p",[_._v("TLAB 是为了解决两个很常见的问题而出现的：")]),_._v(" "),t("ul",[t("li",[_._v("在方法中 new 对象，但是大多数这样创建的对象生命周期都很短，随方法结束就结束了，这样会给 Eden 区的垃圾回收造成较大压力。")]),_._v(" "),t("li",[_._v("多线程场景下，多个线程同时 new 一个对象，可能产生指针碰撞，如果额外加锁性能损失又有点大。")])]),_._v(" "),t("p",[_._v("TLAB 技术具体作用是在每次初始化线程时会在 Eden 区创建一小块内存区域专门给这个线程使用。")]),_._v(" "),t("p",[_._v("相关常用参数配置项如下：")]),_._v(" "),t("table",[t("thead",[t("tr",[t("th",[_._v("参数")]),_._v(" "),t("th",[_._v("含义")]),_._v(" "),t("th",[_._v("默认值")]),_._v(" "),t("th",[_._v("特性")])])]),_._v(" "),t("tbody",[t("tr",[t("td",[_._v("-XX:UseTLAB")]),_._v(" "),t("td",[_._v("是否开启 TLAB")]),_._v(" "),t("td",[_._v("true")]),_._v(" "),t("td")]),_._v(" "),t("tr",[t("td",[_._v("-XX:TLABWasteTargetPercent")]),_._v(" "),t("td",[_._v("TLAB 在 Eden 区的占比")]),_._v(" "),t("td",[_._v("1")]),_._v(" "),t("td",[_._v("更准确的描述是每个线程的 TLAB 初始最大浪费空间配置占 Eden 的比例")])]),_._v(" "),t("tr",[t("td",[_._v("-XX:ResizeTLAB")]),_._v(" "),t("td",[_._v("TLAB 大小是否可变")]),_._v(" "),t("td",[_._v("true")]),_._v(" "),t("td",[_._v("会根据线程历史分配数据相关 EMA 计算出每次期望 TLAB 大小并以这个大小为准申请 TLAB")])])])]),_._v(" "),t("p",[_._v("如果当前线程申请创建的对象大于 TLAB 的大小，就会尝试加锁并在 TLAB 外的 Eden 区创建对象。")]),_._v(" "),t("h2",{attrs:{id:"_5-方法区-method-area"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-方法区-method-area"}},[_._v("#")]),_._v(" 5. 方法区（Method Area）")]),_._v(" "),t("p",[_._v("和堆一样是所有线程共享的内存区域，按虚拟机规范的描述，是堆的一个逻辑部分（Although the method area is logically part of the heap, simple implementations may choose not to either garbage collect or compact it.），但是这个区域的 GC 和堆是分开的，所以我更倾向于叫它堆外内存或者非堆内存。")]),_._v(" "),t("h3",{attrs:{id:"_5-1-方法区存储的数据"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-方法区存储的数据"}},[_._v("#")]),_._v(" 5.1 方法区存储的数据")]),_._v(" "),t("p",[_._v("规范中定义方法区用于存储已被虚拟机加载的 类信息、常量、静态变量、即时编译器编译后的代码等，但是在实际 JVM 实现中，字符串常量池的位置和其他方法区内容是分开的。")]),_._v(" "),t("h3",{attrs:{id:"_5-2-hotspot-虚拟机中方法区实现的演进"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-hotspot-虚拟机中方法区实现的演进"}},[_._v("#")]),_._v(" 5.2 HotSpot 虚拟机中方法区实现的演进")]),_._v(" "),t("h4",{attrs:{id:"_5-2-1-java-1-6-及之前的版本"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-1-java-1-6-及之前的版本"}},[_._v("#")]),_._v(" 5.2.1 JAVA 1.6 及之前的版本")]),_._v(" "),t("p",[_._v("方法区实现就是永久代。")]),_._v(" "),t("h4",{attrs:{id:"_5-2-1-java-1-7"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-1-java-1-7"}},[_._v("#")]),_._v(" 5.2.1 JAVA 1.7")]),_._v(" "),t("p",[_._v("方法区大部分实现是永久代，但是字符串常量池被移到了堆中。")]),_._v(" "),t("h4",{attrs:{id:"_5-2-2-java-8"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-2-java-8"}},[_._v("#")]),_._v(" 5.2.2 JAVA 8")]),_._v(" "),t("p",[_._v("方法区大部分实现是元空间，没有永久代，但是字符串常量池还是在堆中。")]),_._v(" "),t("h3",{attrs:{id:"_5-3-方法区的垃圾回收"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-方法区的垃圾回收"}},[_._v("#")]),_._v(" 5.3 方法区的垃圾回收")]),_._v(" "),t("p",[_._v("HotSpot 对方法区的回收主要分为两个部分：")]),_._v(" "),t("ul",[t("li",[_._v("没有被任何地方引用的常量池中的常量。")]),_._v(" "),t("li",[_._v("不再使用的类，需要同时满足以下3个条件才是不再使用的类：\n"),t("ul",[t("li",[_._v("堆中不存在该类及其派生子类的任何实例。")]),_._v(" "),t("li",[_._v("加载该类的类加载器已经被回收。")]),_._v(" "),t("li",[_._v("该类的 Class 对象没有被任何地方引用，包括但不限于反射调用。")])])])]),_._v(" "),t("p",[_._v("方法区垃圾回收常用于 OSGI、动态代理、动态生成 JSP 等需要自定义 ClassLoader 的场景，防止方法区溢出。")]),_._v(" "),t("h3",{attrs:{id:"_5-4-方法区相关常用参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-方法区相关常用参数"}},[_._v("#")]),_._v(" 5.4 方法区相关常用参数")]),_._v(" "),t("table",[t("thead",[t("tr",[t("th",[_._v("参数")]),_._v(" "),t("th",[_._v("含义")]),_._v(" "),t("th",[_._v("默认值")]),_._v(" "),t("th",[_._v("特性")])])]),_._v(" "),t("tbody",[t("tr",[t("td",[_._v("-XX:MetaspaceSize")]),_._v(" "),t("td",[_._v("元空间初始大小")]),_._v(" "),t("td",[_._v("依赖平台实现")]),_._v(" "),t("td",[_._v("单位字节")])]),_._v(" "),t("tr",[t("td",[_._v("-XX:MaxMetaspaceSize")]),_._v(" "),t("td",[_._v("最大元空间大小")]),_._v(" "),t("td",[_._v("-1")]),_._v(" "),t("td",[_._v("单位字节，默认没有上限，即依赖机器物理内存")])])])]),_._v(" "),t("p",[_._v("通常建议是将这两个参数设置为一样的值，以防止元空间多次扩容造成的性能浪费，但也不宜设的过大，无限占用本机物理内存空间，需要根据实际情况分析设置。")])])}),[],!1,null,null,null);v.default=r.exports}}]);