(window.webpackJsonp=window.webpackJsonp||[]).push([[75],{444:function(t,s,e){"use strict";e.r(s);var i=e(44),n=Object(i.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"设计模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#设计模式"}},[t._v("#")]),t._v(" 设计模式")]),t._v(" "),e("h2",{attrs:{id:"_1-是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-是什么"}},[t._v("#")]),t._v(" 1. 是什么")]),t._v(" "),e("p",[t._v("设计模式(design patterns) 是一类经典的软件设计方案的总称，它不是一组特定的代码，而是一种解决问题的一般性概念，更像是方法论。")]),t._v(" "),e("h2",{attrs:{id:"_2-注意事项"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-注意事项"}},[t._v("#")]),t._v(" 2. 注意事项")]),t._v(" "),e("ul",[e("li",[t._v("设计模式不是 "),e("code",[t._v("银弹")]),t._v("，要根据项目需求和实际代码状况决定是否使用设计模式以及使用何种设计模式，不考虑具体条件使用只会导致更严重的问题。")]),t._v(" "),e("li",[t._v("多看看开源软件和 JDK 的源码，有时候会发现有些框架/api本身就是基于某种设计模式实现的，不用画蛇添足自己再在外层封装。")]),t._v(" "),e("li",[t._v("不需要完全严格遵守某一个特定的设计模式，设计模式是一类解决方案，方案细节是可以随实际情况修改的，使用设计模式的初衷是让代码更灵活、高效，照本宣科地完整使用一个设计模式有时候并不符合预期。")])]),t._v(" "),e("h2",{attrs:{id:"_3-设计模式分类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-设计模式分类"}},[t._v("#")]),t._v(" 3. 设计模式分类")]),t._v(" "),e("p",[t._v("目前常用的设计模式可以分为3类：")]),t._v(" "),e("ul",[e("li",[t._v("创建型模式：提供对象创建的机制，增加已有代码的灵活性和可复用性。")]),t._v(" "),e("li",[t._v("结构型模式：将对象和类组装成大型的结构，同时保证结构的灵活和高效。")]),t._v(" "),e("li",[t._v("行为模式：保证对象间的高效沟通和职责委派。")])]),t._v(" "),e("p",[t._v("一些常用的设计模式按此分类如下：\n创建型模式：")]),t._v(" "),e("ul",[e("li",[e("RouterLink",{attrs:{to:"/design/design_patterns/工厂方法.html"}},[t._v("工厂方法")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/design/design_patterns/抽象工厂.html"}},[t._v("抽象工厂")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/design/design_patterns/单例模式.html"}},[t._v("单例")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/design/design_patterns/生成器模式.html"}},[t._v("生成器")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/design/design_patterns/原型模式.html"}},[t._v("原型")])],1)]),t._v(" "),e("p",[t._v("结构型模式：")]),t._v(" "),e("ul",[e("li",[e("RouterLink",{attrs:{to:"/design/design_patterns/适配器模式.html"}},[t._v("适配器")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/design/design_patterns/桥接模式.html"}},[t._v("桥接")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/design/design_patterns/组合模式.html"}},[t._v("组合")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/design/design_patterns/装饰模式.html"}},[t._v("装饰")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/design/design_patterns/外观模式.html"}},[t._v("外观")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/design/design_patterns/享元模式.html"}},[t._v("享元")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/design/design_patterns/代理模式.html"}},[t._v("代理")])],1)]),t._v(" "),e("p",[t._v("行为模式：")]),t._v(" "),e("ul",[e("li",[e("RouterLink",{attrs:{to:"/design/design_patterns/责任链模式.html"}},[t._v("责任链")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/design/design_patterns/命令模式.html"}},[t._v("命令")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/design/design_patterns/迭代器模式.html"}},[t._v("迭代器")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/design/design_patterns/中介者模式.html"}},[t._v("中介者")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/design/design_patterns/备忘录模式.html"}},[t._v("备忘录")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/design/design_patterns/观察者模式.html"}},[t._v("观察者")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/design/design_patterns/状态模式.html"}},[t._v("状态")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/design/design_patterns/策略模式.html"}},[t._v("策略")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/design/design_patterns/模板方法模式.html"}},[t._v("模板方法")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/design/design_patterns/访问者模式.html"}},[t._v("访问者")])],1)])])}),[],!1,null,null,null);s.default=n.exports}}]);