(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{368:function(t,a,_){t.exports=_.p+"assets/img/abstractfactory.drawio.4f7720eb.png"},453:function(t,a,_){"use strict";_.r(a);var r=_(44),v=Object(r.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"抽象工厂"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#抽象工厂"}},[t._v("#")]),t._v(" 抽象工厂")]),t._v(" "),r("h2",{attrs:{id:"_1-概念"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-概念"}},[t._v("#")]),t._v(" 1. 概念")]),t._v(" "),r("p",[r("code",[t._v("Abstract Factory")]),t._v(" 是一种"),r("code",[t._v("创建型模式")]),t._v("，用来创建一系列相关的对象。")]),t._v(" "),r("h2",{attrs:{id:"_2-意图"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-意图"}},[t._v("#")]),t._v(" 2. 意图")]),t._v(" "),r("p",[t._v("提供一个接口/抽象类，用于创建一组互相有关联的对象家族（多个对象）。")]),t._v(" "),r("h2",{attrs:{id:"_3-类图示例"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-类图示例"}},[t._v("#")]),t._v(" 3. 类图示例")]),t._v(" "),r("p",[r("img",{attrs:{src:_(368),alt:"abstractfactory"}})]),t._v(" "),r("p",[t._v("如图：")]),t._v(" "),r("ul",[r("li",[t._v("Client：业务逻辑实现的代指，使用 AbstractFactory 创建需要的一系列对象。")]),t._v(" "),r("li",[t._v("AbstractFactory：抽象工厂本身真的是一个抽象类/接口，一般不负责具体的业务逻辑，只提供一系列抽象对象的创建接口。")]),t._v(" "),r("li",[t._v("ProductA/ProductB：抽象产品，是构成一系列产品的一组不同但相关（这里相关可以简单理解为一系列，比如椅子和沙发同属家具这一系列）的产品声明接口。")]),t._v(" "),r("li",[t._v("ConcreteFactory1/ConcreteFactory2：创建具体产品对象的工厂实现类，但是返回的类型必须是"),r("strong",[t._v("抽象")]),t._v("产品，这样才能实现具体产品类型和业务逻辑的解耦。")]),t._v(" "),r("li",[t._v("ConcreteProductA1/ConcreteProductA2/ConcreteProductB1/ConcreteProductB2：具体产品，图中同一个序号的产品属于同一系列，分为了两个系列的产品组，ConcreteFactory1 负责生产 1 系列产品， ConcreteFactory2 负责生产 2 系列产品。")])]),t._v(" "),r("h2",{attrs:{id:"_4-应用场景"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-应用场景"}},[t._v("#")]),t._v(" 4. 应用场景")]),t._v(" "),r("h3",{attrs:{id:"_4-1-业务场景"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-业务场景"}},[t._v("#")]),t._v(" 4.1 业务场景")]),t._v(" "),r("ul",[r("li",[t._v("代码需要与多个不同体系的产品进行交互，比如要用同一组通信协议对接不同的运营商实现。")]),t._v(" "),r("li",[t._v("代码中有基于一组工厂方法的类，又包含一些业务逻辑操作，可以把这些工厂方法抽取到独立的抽象工厂类中去。")])]),t._v(" "),r("h3",{attrs:{id:"_4-2-开源实例"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-开源实例"}},[t._v("#")]),t._v(" 4.2 开源实例")]),t._v(" "),r("p",[t._v("JDK 中：")]),t._v(" "),r("ul",[r("li",[t._v("javax.xml.parsers.DocumentBuilderFactory")])]),t._v(" "),r("h2",{attrs:{id:"_5-实现细节和技巧"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5-实现细节和技巧"}},[t._v("#")]),t._v(" 5. 实现细节和技巧")]),t._v(" "),r("ul",[r("li",[t._v("在写代码之前先梳理产品类型，如果能形成体系+类型的矩阵，就可以继续按照抽象工厂模式进行设计和编码。")]),t._v(" "),r("li",[t._v("每一种产品都需要定义接口。")]),t._v(" "),r("li",[t._v("为每一个体系的产品定义一个具体工厂。")])]),t._v(" "),r("h2",{attrs:{id:"_6-优缺点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_6-优缺点"}},[t._v("#")]),t._v(" 6. 优缺点")]),t._v(" "),r("p",[t._v("优点：")]),t._v(" "),r("ul",[r("li",[t._v("确保一系列对象类型互相匹配。")]),t._v(" "),r("li",[t._v("解耦业务代码和具体产品对象的代码。")]),t._v(" "),r("li",[t._v("符合单一职责原则。")]),t._v(" "),r("li",[t._v("符合开闭原则。")])]),t._v(" "),r("p",[t._v("缺点：")]),t._v(" "),r("ul",[r("li",[t._v("引入产品接口和抽象工厂，类的数量大大增多了，代码组织结构更复杂了。")])]),t._v(" "),r("h2",{attrs:{id:"_7-和其他设计模式的关系"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_7-和其他设计模式的关系"}},[t._v("#")]),t._v(" 7. 和其他设计模式的关系")]),t._v(" "),r("h3",{attrs:{id:"_7-1-和其他-工厂-对比"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-和其他-工厂-对比"}},[t._v("#")]),t._v(" 7.1 和其他“工厂”对比")]),t._v(" "),r("p",[r("RouterLink",{attrs:{to:"/design/design_patterns/几种“工厂”之间的区别.html"}},[t._v("几个名字带“工厂”的创建型模式对比")])],1),t._v(" "),r("h3",{attrs:{id:"_7-2-和其他创建型模式的关系"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-和其他创建型模式的关系"}},[t._v("#")]),t._v(" 7.2 和其他创建型模式的关系")]),t._v(" "),r("ul",[r("li",[t._v("抽象工厂通常基于一组工厂方法演化而来。")]),t._v(" "),r("li",[t._v("抽象工厂可以用单例模式来实现。")])]),t._v(" "),r("h3",{attrs:{id:"_7-3-和其他非创建型模式的关系"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_7-3-和其他非创建型模式的关系"}},[t._v("#")]),t._v(" 7.3 和其他非创建型模式的关系")])])}),[],!1,null,null,null);a.default=v.exports}}]);