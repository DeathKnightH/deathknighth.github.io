(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{415:function(t,a,_){"use strict";_.r(a);var e=_(44),v=Object(e.a)({},(function(){var t=this,a=t.$createElement,_=t._self._c||a;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"jvm-垃圾回收"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#jvm-垃圾回收"}},[t._v("#")]),t._v(" JVM 垃圾回收")]),t._v(" "),_("h2",{attrs:{id:"_1-如何判断一个对象是否可回收"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-如何判断一个对象是否可回收"}},[t._v("#")]),t._v(" 1. 如何判断一个对象是否可回收")]),t._v(" "),_("h3",{attrs:{id:"_1-1-引用计数法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-引用计数法"}},[t._v("#")]),t._v(" 1.1 引用计数法")]),t._v(" "),_("p",[t._v("因为难解决循环引用的问题，JVM 不使用此方法。")]),t._v(" "),_("h3",{attrs:{id:"_1-2-可达性分析法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-可达性分析法"}},[t._v("#")]),t._v(" 1.2 可达性分析法")]),t._v(" "),_("p",[t._v("以 GCRoots 为起点，分析起点到引用对象的引用链，如果不可达就可以回收。")]),t._v(" "),_("p",[t._v("GCRoots 一般包含以下内容：")]),t._v(" "),_("ul",[_("li",[t._v("虚拟机栈中引用的对象")]),t._v(" "),_("li",[t._v("本地方法栈中引用的对象")]),t._v(" "),_("li",[t._v("方法区中静态属性引用的对象")]),t._v(" "),_("li",[t._v("方法区中常量引用的对象")])]),t._v(" "),_("h3",{attrs:{id:"_1-3-方法区回收"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-方法区回收"}},[t._v("#")]),t._v(" 1.3 方法区回收")]),t._v(" "),_("p",[t._v("参考 "),_("RouterLink",{attrs:{to:"/java/jvm/JVM内存结构.html#53-方法区的垃圾回收"}},[t._v("JVM 内存结构——方法区部分")]),t._v("。")],1),t._v(" "),_("p",[t._v("使用 "),_("code",[t._v("-Xnoclassgc")]),t._v(" 参数可以关闭类卸载功能。")]),t._v(" "),_("h2",{attrs:{id:"_2-引用类型与垃圾回收"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-引用类型与垃圾回收"}},[t._v("#")]),t._v(" 2. 引用类型与垃圾回收")]),t._v(" "),_("p",[t._v("Java 中有 4 中类型的引用，引用的类型和对象回收的时机息息相关。")]),t._v(" "),_("h3",{attrs:{id:"_2-1-强引用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-强引用"}},[t._v("#")]),t._v(" 2.1 强引用")]),t._v(" "),_("p",[t._v("强引用的对象只有在 GCRoots 不可达的情况下才会被回收。")]),t._v(" "),_("p",[t._v("平时直接用 new 语句创建的对象都是强引用对象，例如：")]),t._v(" "),_("div",{staticClass:"language- line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v("Object obj = new Object();\n")])]),t._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[t._v("1")]),_("br")])]),_("h3",{attrs:{id:"_2-2-软引用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-软引用"}},[t._v("#")]),t._v(" 2.2 软引用")]),t._v(" "),_("p",[t._v("即使 GCRoots 可达，软引用对象也会在内存不足时被回收。")]),t._v(" "),_("p",[t._v("Java 中用 SoftReference 类创建和管理软引用，例如：")]),t._v(" "),_("div",{staticClass:"language- line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v('SoftReference<String> softString = new SoftReference<String>(new String("test"));\n')])]),t._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[t._v("1")]),_("br")])]),_("p",[t._v("在 JVM 内存不足时，GC 会回收软引用，回收后以上代码的 "),_("code",[t._v("softString.get()")]),t._v(" 会返回 "),_("code",[t._v("null")]),t._v("。")]),t._v(" "),_("h3",{attrs:{id:"_2-3-弱引用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-弱引用"}},[t._v("#")]),t._v(" 2.3 弱引用")]),t._v(" "),_("p",[t._v("比软引用更弱，只要发生 GC，不论内存是否不足，弱引用都会被回收。")]),t._v(" "),_("p",[t._v("Java 中用 WeakReference 类创建和管理弱引用，例如：")]),t._v(" "),_("div",{staticClass:"language- line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v('WeakReference<String> softString = new WeakReference<String>(new String("test"));\n')])]),t._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[t._v("1")]),_("br")])]),_("p",[t._v("只要发生 GC，回收后以上代码的 "),_("code",[t._v("softString.get()")]),t._v(" 会返回 "),_("code",[t._v("null")]),t._v("。")]),t._v(" "),_("h3",{attrs:{id:"_2-4-虚引用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-虚引用"}},[t._v("#")]),t._v(" 2.4 虚引用")]),t._v(" "),_("p",[t._v("需要和 ReferenceQueue 一起使用，用来跟踪对象被垃圾回收的活动。")]),t._v(" "),_("p",[t._v("虚引用无法获得对象，也不会对对象本身的生命周期产生影响，只是记录该对象将要被回收的标记，例如：")]),t._v(" "),_("div",{staticClass:"language- line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v('ReferenceQueue<String> referenceQueue = new ReferenceQueue<>();\nString test = new String("test");\nPhantomReference<String> softString = new PhantomReference<String>(test, referenceQueue);\n')])]),t._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[t._v("1")]),_("br"),_("span",{staticClass:"line-number"},[t._v("2")]),_("br"),_("span",{staticClass:"line-number"},[t._v("3")]),_("br")])]),_("p",[t._v("当 "),_("code",[t._v("test")]),t._v(" 对象被标记即将回收时，会被放入 "),_("code",[t._v("referenceQueue")]),t._v("。")]),t._v(" "),_("h2",{attrs:{id:"_3-垃圾收集算法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-垃圾收集算法"}},[t._v("#")]),t._v(" 3. 垃圾收集算法")]),t._v(" "),_("p",[t._v("不讨论具体实现，只讨论原理和问题。")]),t._v(" "),_("h3",{attrs:{id:"_3-1-标记-清除"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-标记-清除"}},[t._v("#")]),t._v(" 3.1.标记-清除")]),t._v(" "),_("p",[t._v("这种算法是最基础的垃圾回收算法，后续大多都是在此基础上改进的。")]),t._v(" "),_("h4",{attrs:{id:"_3-1-1-原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-1-原理"}},[t._v("#")]),t._v(" 3.1.1 原理")]),t._v(" "),_("p",[t._v("大概分为两步：")]),t._v(" "),_("ul",[_("li",[t._v("先标出所有要回收的对象。")]),t._v(" "),_("li",[t._v("然后统一回收所有被标记的对象。")])]),t._v(" "),_("h4",{attrs:{id:"_3-1-2-问题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-2-问题"}},[t._v("#")]),t._v(" 3.1.2 问题")]),t._v(" "),_("p",[t._v("此算法主要存在两个问题：")]),t._v(" "),_("ul",[_("li",[t._v("效率问题：标记和清除两个过程效率都不高")]),t._v(" "),_("li",[t._v("空间问题：清除后可能产生大量内存碎片，导致后续内存余量足但需要大的连续空间时可能因为内存不够而导致各种问题（提前扩容/提前GC等）")])]),t._v(" "),_("h3",{attrs:{id:"_3-2-标记-整理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-标记-整理"}},[t._v("#")]),t._v(" 3.2 标记-整理")]),t._v(" "),_("h4",{attrs:{id:"_3-2-1-原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-1-原理"}},[t._v("#")]),t._v(" 3.2.1 原理")]),t._v(" "),_("p",[t._v("也是分为两个步骤：")]),t._v(" "),_("ul",[_("li",[t._v("和标记-清除一样先标出所有要回收的对象。")]),t._v(" "),_("li",[t._v("然后将未标记的对象都向一端移动，直接清理端边界外的内存。")])]),t._v(" "),_("h4",{attrs:{id:"_3-2-2-问题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-2-问题"}},[t._v("#")]),t._v(" 3.2.2 问题")]),t._v(" "),_("p",[t._v("还是效率问题，如果大量对象死亡，那么标记和整理都会耗费较长时间。")]),t._v(" "),_("h3",{attrs:{id:"_3-3-复制"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-复制"}},[t._v("#")]),t._v(" 3.3 复制")]),t._v(" "),_("p",[t._v("针对每次 GC 大量对象死亡，小部分对象存活的情况，也有这种复制算法。")]),t._v(" "),_("h4",{attrs:{id:"_3-3-1-原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-1-原理"}},[t._v("#")]),t._v(" 3.3.1 原理")]),t._v(" "),_("p",[t._v("将要 GC 的内存分为两块，每次只使用一块内存，在 GC 时把存活对象复制到另一块中，然后直接清理发生 GC 的这一块内存。")]),t._v(" "),_("h4",{attrs:{id:"_3-3-2-问题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-2-问题"}},[t._v("#")]),t._v(" 3.3.2 问题")]),t._v(" "),_("p",[t._v("大部分对象存活时需要复制大量对象，效率较低。")]),t._v(" "),_("h3",{attrs:{id:"_3-4-分代收集"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-分代收集"}},[t._v("#")]),t._v(" 3.4 分代收集")]),t._v(" "),_("p",[t._v("因为以上的种种问题，没有一种垃圾收集算法能完美解决所有情况，现代商用 JVM 均采用了分代收集的策略。")]),t._v(" "),_("h4",{attrs:{id:"_3-4-1-原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-1-原理"}},[t._v("#")]),t._v(" 3.4.1 原理")]),t._v(" "),_("p",[t._v("分代收集不是一种具体的算法，而是根据对象存活周期将内存分代，对不同的块采用不同的收集算法。")]),t._v(" "),_("p",[t._v("常见的是分为新生代和老年代：")]),t._v(" "),_("ul",[_("li",[t._v("新生代用复制算法。")]),t._v(" "),_("li",[t._v("老年代用标记整理或者标记清除算法。")])]),t._v(" "),_("h2",{attrs:{id:"_4-hotspot-中的垃圾收集器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-hotspot-中的垃圾收集器"}},[t._v("#")]),t._v(" 4. HotSpot 中的垃圾收集器")]),t._v(" "),_("p",[t._v("JDK 8 版本的 HotSpot jvm 有 7 中 垃圾收集器，按照特性可以分为 3 类：")]),t._v(" "),_("ul",[_("li",[t._v("Serial 单线程串行")]),t._v(" "),_("li",[t._v("Parallel 多线程并行，是 Serial 的多线程版")]),t._v(" "),_("li",[t._v("Mostly Concurrent 绝大多数工作时间是并发的，对工作线程暂停影响很小")])]),t._v(" "),_("h3",{attrs:{id:"_4-1-serial"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-serial"}},[t._v("#")]),t._v(" 4.1 Serial")]),t._v(" "),_("h4",{attrs:{id:"_4-1-1-serial-收集器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-1-serial-收集器"}},[t._v("#")]),t._v(" 4.1.1 Serial 收集器")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("启用参数")]),t._v(" "),_("th",[t._v("特点")]),t._v(" "),_("th",[t._v("使用范围")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("-XX:+UseSerialGC")]),t._v(" "),_("td",[t._v("单线程，使用复制算法")]),t._v(" "),_("td",[t._v("新生代")])])])]),t._v(" "),_("p",[t._v("client 模式下默认的新生代收集器。")]),t._v(" "),_("p",[t._v("只能和 CMS、Serial Old 配合使用。")]),t._v(" "),_("h4",{attrs:{id:"_4-1-2-serial-old-收集器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-2-serial-old-收集器"}},[t._v("#")]),t._v(" 4.1.2 Serial Old 收集器")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("启用参数")]),t._v(" "),_("th",[t._v("特点")]),t._v(" "),_("th",[t._v("使用范围")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("-XX:+UseSerialOldGC")]),t._v(" "),_("td",[t._v("单线程，使用标记-整理算法")]),t._v(" "),_("td",[t._v("老年代")])])])]),t._v(" "),_("h3",{attrs:{id:"_4-2-parallel"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-parallel"}},[t._v("#")]),t._v(" 4.2 Parallel")]),t._v(" "),_("h4",{attrs:{id:"_4-2-1-parnew-收集器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-1-parnew-收集器"}},[t._v("#")]),t._v(" 4.2.1 ParNew 收集器")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("启用参数")]),t._v(" "),_("th",[t._v("特点")]),t._v(" "),_("th",[t._v("使用范围")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("-XX:+UseParNewGC")]),t._v(" "),_("td",[t._v("多线程，使用复制算法")]),t._v(" "),_("td",[t._v("新生代")])])])]),t._v(" "),_("h4",{attrs:{id:"_4-2-2-parallel-scavenge-收集器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-2-parallel-scavenge-收集器"}},[t._v("#")]),t._v(" 4.2.2 Parallel Scavenge 收集器")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("启用参数")]),t._v(" "),_("th",[t._v("特点")]),t._v(" "),_("th",[t._v("使用范围")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("-XX:+UseParallelGC")]),t._v(" "),_("td",[t._v("多线程，使用复制算法")]),t._v(" "),_("td",[t._v("新生代")])])])]),t._v(" "),_("p",[t._v("server 模式下默认的新生代收集器。")])])}),[],!1,null,null,null);a.default=v.exports}}]);