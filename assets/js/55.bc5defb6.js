(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{412:function(a,v,t){"use strict";t.r(v);var _=t(44),r=Object(_.a)({},(function(){var a=this,v=a.$createElement,t=a._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"jvm-内存结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jvm-内存结构"}},[a._v("#")]),a._v(" JVM 内存结构")]),a._v(" "),t("h2",{attrs:{id:"_0-概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_0-概念"}},[a._v("#")]),a._v(" 0. 概念")]),a._v(" "),t("p",[a._v("不同于"),t("code",[a._v("内存模型")]),a._v("，内存结构通常指的是 JVM 的运行时数据区。")]),a._v(" "),t("p",[a._v("根据虚拟机规范，运行时数据区分为两类：")]),a._v(" "),t("ul",[t("li",[a._v("线程私有：程序计数器，虚拟机栈，本地方法栈")]),a._v(" "),t("li",[a._v("线程共享：堆，方法区")])]),a._v(" "),t("h2",{attrs:{id:"_1-程序计数器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-程序计数器"}},[a._v("#")]),a._v(" 1. 程序计数器")]),a._v(" "),t("p",[a._v("程序计数器（Program Counter Register），是物理寄存器的一种抽象实现。")]),a._v(" "),t("h3",{attrs:{id:"_1-1-作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-作用"}},[a._v("#")]),a._v(" 1.1 作用")]),a._v(" "),t("p",[a._v("程序计数器是程序控制流的指示器，分支、循环、跳转、")]),a._v(" "),t("ul",[t("li",[a._v("如果当前线程正在执行的是 Java 方法，那么计数器记录的是下一个执行的字节码地址")]),a._v(" "),t("li",[a._v("如果当前线程正在执行的是 native 方法，那么计数器记录的是 undefined")])]),a._v(" "),t("h3",{attrs:{id:"_1-2-总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-总结"}},[a._v("#")]),a._v(" 1.2 总结")]),a._v(" "),t("ul",[t("li",[a._v("程序计数器占用内存小，运行速度快，且是唯一一个没有规定 OutOfMemoryError 的区域。")]),a._v(" "),t("li",[a._v("属于每个线程私有，生命周期与所属的线程相同。")])]),a._v(" "),t("h2",{attrs:{id:"_2-虚拟机栈"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-虚拟机栈"}},[a._v("#")]),a._v(" 2. 虚拟机栈")]),a._v(" "),t("p",[a._v("Java 虚拟机栈（Java Virtual Machine Stack）内部保存的是栈帧（Stack Frame），每个栈帧对应了一次方法调用。")]),a._v(" "),t("h3",{attrs:{id:"_2-1-作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-作用"}},[a._v("#")]),a._v(" 2.1 作用")]),a._v(" "),t("p",[a._v("主管 Java 程序的运行，保存方法的局部变量、部分结果，并参与方法的调用、返回。")]),a._v(" "),t("h3",{attrs:{id:"_2-2-存储单位"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-存储单位"}},[a._v("#")]),a._v(" 2.2 存储单位")]),a._v(" "),t("p",[a._v("栈帧是虚拟机栈的存储单位，栈帧是一个内存区块，存储着方法执行过程中的各种数据，包括：")]),a._v(" "),t("ul",[t("li",[a._v("局部变量表（Local Variables）")]),a._v(" "),t("li",[a._v("操作数栈（Operand Stack）")]),a._v(" "),t("li",[a._v("动态链接（Dynamic Linking）：指向运行时常量池的方法引用")]),a._v(" "),t("li",[a._v("方法返回地址（Return Address）：方法退出的地址")]),a._v(" "),t("li",[a._v("附加信息：方法调用附加信息，依赖 JVM 的具体实现")])]),a._v(" "),t("h4",{attrs:{id:"_2-2-1-局部变量表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-1-局部变量表"}},[a._v("#")]),a._v(" 2.2.1 局部变量表")]),a._v(" "),t("p",[a._v("是一组变量值存储空间，存储方法参数和局部变量。")]),a._v(" "),t("ul",[t("li",[a._v("存储的单位是 slot，32位及以下的变量占1个slot，64位占2个slot。")]),a._v(" "),t("li",[a._v("局部变量表中存储的变量也是一种 GCRoots，在垃圾回收的可达性分析时起到重要作用。")])]),a._v(" "),t("h4",{attrs:{id:"_2-2-2-操作数栈"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-2-操作数栈"}},[a._v("#")]),a._v(" 2.2.2 操作数栈")]),a._v(" "),t("p",[a._v("操作数栈是一个后进先出（LIFO）的表达式栈（Expression Stack），主要用于存储计算过程中的中间结果和临时变量。")]),a._v(" "),t("h4",{attrs:{id:"_2-2-3-动态链接"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-3-动态链接"}},[a._v("#")]),a._v(" 2.2.3 动态链接")]),a._v(" "),t("p",[a._v("Java 源文件在编译时会把变量和方法引用转换为符号引用放到 class 文件的常量池中，在 JVM 中实际调用的时候需要动态链接将符号引用转换为直接引用。")]),a._v(" "),t("h4",{attrs:{id:"_2-2-4-方法返回地址"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-4-方法返回地址"}},[a._v("#")]),a._v(" 2.2.4 方法返回地址")]),a._v(" "),t("p",[a._v("Java 的方法退出有两种情况：")]),a._v(" "),t("ul",[t("li",[a._v("正常执行完成退出")]),a._v(" "),t("li",[a._v("执行过程中出现未处理的异常，非正常退出")])]),a._v(" "),t("p",[a._v("无论以哪种方式退出方法，都会返回到方法调用的地方。正常退出，返回地址是调用者的程序计数器的值；非正常退出，返回地址通过异常表来确定，不存储在栈帧中。")]),a._v(" "),t("h4",{attrs:{id:"_2-2-5-附加信息"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-5-附加信息"}},[a._v("#")]),a._v(" 2.2.5 附加信息")]),a._v(" "),t("p",[a._v("可能会有一些虚拟机实现相关的附加信息，比如对程序调试提供支持的信息，但这不是规范，带不带或者带什么信息取决于具体的 JVM 实现。")]),a._v(" "),t("h2",{attrs:{id:"_3-本地方法栈"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-本地方法栈"}},[a._v("#")]),a._v(" 3. 本地方法栈")]),a._v(" "),t("p",[a._v("本地方法栈（Native Method Stack）是用于管理本地方法运行的栈。")]),a._v(" "),t("ul",[t("li",[a._v("native 方法可以通过虚拟机提供的接口操作/访问虚拟机运行时数据区，包括程序计数器和堆等。")]),a._v(" "),t("li",[a._v("HotSpot JVM 中本地方法栈和虚拟机栈是同一片内存区域。")]),a._v(" "),t("li",[a._v("不是所有 JVM 都支持本地方法，虚拟机规范中并没有规定本地方法栈的具体实现语言、数据结构、实现方式等，所以不支持本地方法的JVM可以不实现本地方法栈。")])]),a._v(" "),t("h2",{attrs:{id:"_4-堆"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-堆"}},[a._v("#")]),a._v(" 4. 堆")]),a._v(" "),t("p",[a._v("堆（Heap）是绝大多数 Java 应用在运行时管理的最大的一块内存区域，被所有线程共享，用于存放绝大多数对象实例。")]),a._v(" "),t("h3",{attrs:{id:"_4-1-堆内存划分"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-堆内存划分"}},[a._v("#")]),a._v(" 4.1 堆内存划分")]),a._v(" "),t("p",[a._v("为了更好地执行 GC，HotSpot JVM 对堆内存进行了划分，逻辑上分为 3 类：")]),a._v(" "),t("ul",[t("li",[a._v("新生代：新申请的对象和没有达到年龄的对象都在新生代。")]),a._v(" "),t("li",[a._v("老年代：长时间被使用且达到一定年龄还没有被回收的对象都在老年代。")]),a._v(" "),t("li",[a._v("元空间（Java 8 之前实现是永久代）：存储类信息、常量池、静态变量、JIT编译后的代码缓存等数据，是 JVM 规范中方法区的实际实现。")])]),a._v(" "),t("h4",{attrs:{id:"_4-1-1-新生代-young-generation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-1-新生代-young-generation"}},[a._v("#")]),a._v(" 4.1.1 新生代（Young Generation）")]),a._v(" "),t("p",[a._v("大多数对象新建时都在新生代中，在 HotSpot 中新生代又分为3个部分，一个 Eden Memory 和两个 Survivor memory，默认大小比例为 8:1:1：")]),a._v(" "),t("ul",[t("li",[a._v("Eden：大多数新建对象都在 Eden 区，当 Eden 区满时执行 Minor GC，将幸存者移动到 Survivor 区，对象年龄 +1。")]),a._v(" "),t("li",[a._v("Survivor：执行 Minor GC 时也会回收 Survivor 区的对象并将幸存者移动到另一个 Survivor 区，对象年龄 +1。因此同一时间总有一个 Survivor 区是空的。")])]),a._v(" "),t("p",[a._v("经过多次 Minor GC 仍然存活的对象会被移动到老年代，判断依据一般是对象年龄超过了 "),t("code",[a._v("-XX:PetenureSizeThreshold")]),a._v(" 设置的值（默认是 15）。")]),a._v(" "),t("p",[a._v("可以通过以下参数设置新生代的大小：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("-Xmn          # 直接设置整个新生代的大小\n-XX:NewRatio  # 老年代与新生代大小的比例，比如设置为 4 就是 `老：新 = 4 ：1`\n-XX:SurvivorRatio # 新生代中 Eden 区和单个 Survivor 区大小的比例，比如设置为 8 就是 `Eden : Survivor = 8 : 1`\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br")])]),t("h4",{attrs:{id:"_4-1-2-老年代-old-generation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-2-老年代-old-generation"}},[a._v("#")]),a._v(" 4.1.2 老年代（Old Generation）")]),a._v(" "),t("p",[a._v("老年代中一般存储两类对象：")]),a._v(" "),t("ul",[t("li",[a._v("大对象，需要大量连续内存空间的对象会直接进入老年代，防止在 Eden 区和 Survivor 区之间发生大量内存拷贝。")]),a._v(" "),t("li",[a._v("经过多轮 Minor GC 仍然存活（默认 15 次）的对象也会进入老年代。")])]),a._v(" "),t("p",[a._v("老年代内存满时会进行 Major GC。")]),a._v(" "),t("p",[a._v("可以通过以下参数设置老年代的大小：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("-XX:NewRatio  # 老年代与新生代大小的比例，比如设置为 4 就是 `老：新 = 4 ：1`\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("h4",{attrs:{id:"_4-1-3-方法区"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-3-方法区"}},[a._v("#")]),a._v(" 4.1.3 方法区")]),a._v(" "),t("h3",{attrs:{id:"_4-2-设置参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-设置参数"}},[a._v("#")]),a._v(" 4.2 设置参数")]),a._v(" "),t("ul",[t("li",[a._v("初始堆大小，默认为"),t("code",[a._v("电脑内存大小/64")]),a._v("，以下两个参数设置等价：")])]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("-Xms\n-XX:InitialHeapSize\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br")])]),t("ul",[t("li",[a._v("最大堆大小，默认为"),t("code",[a._v("电脑内存大小/4")]),a._v("，以下两个参数设置等价：")])]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("-Xmx\n-XX:MaxHeapSize\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br")])]),t("p",[a._v("如果运行时申请的堆内存大小超过设置的最大堆大小，就会抛出 "),t("code",[a._v("OutOfMemoryError")]),a._v(" 异常。")])])}),[],!1,null,null,null);v.default=r.exports}}]);