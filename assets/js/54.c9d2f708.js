(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{417:function(t,v,_){"use strict";_.r(v);var r=_(44),a=Object(r.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"简单工厂-工厂方法-抽象工厂"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#简单工厂-工厂方法-抽象工厂"}},[t._v("#")]),t._v(" 简单工厂/工厂方法/抽象工厂")]),t._v(" "),_("ul",[_("li",[t._v("simple factory（简单工厂）严格来说不是一种设计模式而是一种编程习惯。单纯的把创建的对象的操作抽取出来单独放到一个类中，这个类就是简单工厂。可以在工厂中通过入参和逻辑判断应该返回何种产品。")]),t._v(" "),_("li",[t._v("factory method（工厂方法）基于接口和继承，工厂方法返回的是抽象类型，具体类型的创建由子类/实现类实现。")]),t._v(" "),_("li",[t._v("abstract factory（抽象工厂）通常基于一组工厂方法，返回的是一系列相关的抽象类型，具体类型的创建由具体工厂来实现。")])]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("名称")]),t._v(" "),_("th",[t._v("返回类型")]),t._v(" "),_("th",[t._v("生成逻辑实现位置")]),t._v(" "),_("th",[t._v("模式主体")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("简单工厂")]),t._v(" "),_("td",[t._v("一个抽象类型")]),t._v(" "),_("td",[t._v("在简单工厂类中")]),t._v(" "),_("td",[t._v("一个只包含对象创建操作的类")])]),t._v(" "),_("tr",[_("td",[t._v("工厂方法")]),t._v(" "),_("td",[t._v("一个抽象类型")]),t._v(" "),_("td",[t._v("在实现了工厂方法的具体子类")]),t._v(" "),_("td",[t._v("一个包含工厂方法的父类和若干继承该父类并实现了工厂方法的子类")])]),t._v(" "),_("tr",[_("td",[t._v("抽象工厂")]),t._v(" "),_("td",[t._v("一组抽象类型")]),t._v(" "),_("td",[t._v("实现了抽象工厂的具体工厂类")]),t._v(" "),_("td",[t._v("一个抽象工厂（通常是接口或者抽象类）和若干实现了抽象工厂的实现类")])])])])])}),[],!1,null,null,null);v.default=a.exports}}]);