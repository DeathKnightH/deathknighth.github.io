(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{358:function(_,v,t){_.exports=t.p+"assets/img/Classlifecycle.drawio.28a78d45.png"},359:function(_,v,t){_.exports=t.p+"assets/img/Classloadprocess.drawio.dd29d369.png"},427:function(_,v,t){"use strict";t.r(v);var a=t(44),e=Object(a.a)({},(function(){var _=this,v=_.$createElement,a=_._self._c||v;return a("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[a("h1",{attrs:{id:"类加载机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类加载机制"}},[_._v("#")]),_._v(" 类加载机制")]),_._v(" "),a("h2",{attrs:{id:"_1-概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-概述"}},[_._v("#")]),_._v(" 1. 概述")]),_._v(" "),a("p",[_._v("区别于其他在编译时需要进行连接工作的语言，Java 的类型加载、连接、初始化过程都是在运行时完成的。")]),_._v(" "),a("p",[_._v("虚拟机把描述类的数据从 class 文件（不一定是磁盘文件，只要是能输入的二进制流都行）加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的 Java 类型，这就是类加载。")]),_._v(" "),a("p",[_._v("在虚拟机中类的生命周期如下：\n"),a("img",{attrs:{src:t(358),alt:"image-class-lifecycle"}})]),_._v(" "),a("p",[_._v("这些阶段除了 "),a("code",[_._v("解析")]),_._v(" 以外都是按顺序开始的，但不一定按顺序完成，比如可能类还没完成 "),a("code",[_._v("加载")]),_._v("，就已经开始 "),a("code",[_._v("验证")]),_._v(" 了，这些阶段通常是互相交叉进行的。")]),_._v(" "),a("h2",{attrs:{id:"_2-类加载的时机"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-类加载的时机"}},[_._v("#")]),_._v(" 2. 类加载的时机")]),_._v(" "),a("p",[_._v("虚拟机规范没有规定 "),a("code",[_._v("Loading")]),_._v(" 阶段执行的时机，但是强制规定了 "),a("code",[_._v("Initialization")]),_._v(" 阶段的执行时机，即有且仅有在 6 种主动引用类的情况下，必须进行 "),a("code",[_._v("Initialization")]),_._v("。")]),_._v(" "),a("p",[_._v("可以使用：")]),_._v(" "),a("blockquote",[a("p",[_._v("-XX:+TraceClassLoading")])]),_._v(" "),a("p",[_._v("参数来观察类加载的实际情况。也可以通过在类的静态域添加 print 方法来判断该类是否执行了初始化。")]),_._v(" "),a("h3",{attrs:{id:"_2-1-主动引用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-主动引用"}},[_._v("#")]),_._v(" 2.1 主动引用")]),_._v(" "),a("p",[_._v("主动引用在规范中有且仅有 6 种情况：")]),_._v(" "),a("ul",[a("li",[_._v("遇到 new、getstatic、putstatic、invokestatic 这 4 条字节码指令的任意一条时，如果目标类没有进行初始化，则会先触发初始化。")]),_._v(" "),a("li",[_._v("使用 java.lang.reflect 包的方法对目标类进行反射调用时，如果目标类没有进行初始化，则会先触发初始化。")]),_._v(" "),a("li",[_._v("进行一个类的初始化时，如果该类的父类没有进行初始化，则会先触发其父类的初始化。")]),_._v(" "),a("li",[_._v("虚拟机启动时，用户指定执行的主类（即 main 方法所在的类）会先触发初始化。")]),_._v(" "),a("li",[_._v("使用动态语言支持时，MethodHandle 和 VarHandle 调用前需要使用 "),a("code",[_._v("findeStaticVarHandle")]),_._v(" 来初始化目标类。")]),_._v(" "),a("li",[_._v("JDK 8 之后如果在接口中定义了 default 方法，在其实现类初始化之前需要先对接口进行初始化。")])]),_._v(" "),a("h3",{attrs:{id:"_2-2-被动引用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-被动引用"}},[_._v("#")]),_._v(" 2.2 被动引用")]),_._v(" "),a("p",[_._v("除了以上 6 种强制初始化的情况，其余情况都是被动引用，不用强制执行初始化。")]),_._v(" "),a("h2",{attrs:{id:"_3-类加载过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-类加载过程"}},[_._v("#")]),_._v(" 3. 类加载过程")]),_._v(" "),a("p",[_._v("类加载总体分为 5 个阶段，加载、验证、准备、解析、初始化。其中验证、准备、解析可以统称为 "),a("code",[_._v("连接")]),_._v("。\n"),a("img",{attrs:{src:t(359),alt:"image-class-lifecycle"}})]),_._v(" "),a("h3",{attrs:{id:"_3-1-加载-loading"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-加载-loading"}},[_._v("#")]),_._v(" 3.1 加载（Loading）")]),_._v(" "),a("p",[_._v("加载阶段是类加载过程的第一步，主要完成以下 3 件事：")]),_._v(" "),a("ol",[a("li",[_._v("通过类的全限定名来获取此类的二进制字节流。")]),_._v(" "),a("li",[_._v("将这个字节流所代表的静态存储结构转换为方法区的运行时数据结构。")]),_._v(" "),a("li",[_._v("在内存中生成一个代表这个类的 "),a("code",[_._v("java.lang.Class")]),_._v(" 对象，作为方法区这些数据的访问入口。")])]),_._v(" "),a("p",[_._v("以上 3 点都没有具体的描述，实际实现方式和应用都很灵活。")]),_._v(" "),a("p",[_._v("利用这些灵活性，我们可以定制加载阶段的具体实现，比如自定义获取二进制流的过程，可以从网络上来，也可以从加密后的文件解密得来，也可以在运行时计算生成。")]),_._v(" "),a("h3",{attrs:{id:"_3-2-验证-verification"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-验证-verification"}},[_._v("#")]),_._v(" 3.2 验证（Verification）")]),_._v(" "),a("p",[_._v("验证阶段的目的是确保 Class 二进制流中包含的信息符合虚拟机的要求，同时保证其内容不会危害虚拟机的安全。")]),_._v(" "),a("p",[_._v("总体上看，此阶段大致会完成以下 4 个校验动作：")]),_._v(" "),a("ol",[a("li",[_._v("文件格式验证\n验证字节流是否符合 Class 文件格式的规范。比如以下验证点：")])]),_._v(" "),a("ul",[a("li",[_._v("是否以 "),a("code",[_._v("0xCAFEBABE")]),_._v(" 开头")]),_._v(" "),a("li",[_._v("主、次版本号是否在当前虚拟机的处理范围内")]),_._v(" "),a("li",[_._v("检查常量 tag 标志，是否存在不被支持的常量类型")])]),_._v(" "),a("p",[_._v("。。。等")]),_._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[_._v("元数据验证\n验证字节码描述信息，保证其符合 Java 语言规范的要求。比如以下验证点：")])]),_._v(" "),a("ul",[a("li",[_._v("这个类是否有父类")]),_._v(" "),a("li",[_._v("如果这个类不是抽象类，是否实现了接口和其父类要求实现的所有方法")])]),_._v(" "),a("p",[_._v("。。。等")]),_._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[_._v("字节码验证\n通过数据流和控制流分析，确保程序语义是合法的、符合逻辑的。比如：")])]),_._v(" "),a("ul",[a("li",[_._v("保证跳转指令不会跳转到方法体以外的字节码指令上")]),_._v(" "),a("li",[_._v("保证方法体中的类型转换是有效的")])]),_._v(" "),a("p",[_._v("。。。等")]),_._v(" "),a("ol",{attrs:{start:"4"}},[a("li",[_._v("符号引用验证\n这部分的验证发生在 "),a("code",[_._v("解析")]),_._v(" 阶段中，目的是保证符号引用转换为直接引用的解析操作能正常进行。")])]),_._v(" "),a("h3",{attrs:{id:"_3-3-准备-preparation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-准备-preparation"}},[_._v("#")]),_._v(" 3.3 准备（Preparation）")]),_._v(" "),a("p",[_._v("正式为 "),a("code",[_._v("类变量")]),_._v(" 分配内存并设置 "),a("code",[_._v("类变量初始值")]),_._v(" 的阶段。")]),_._v(" "),a("p",[_._v("有以下注意点：")]),_._v(" "),a("ol",[a("li",[_._v("这里的初始值通常情况是指 "),a("code",[_._v("零值")]),_._v("。比如定义了")])]),_._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[_._v("private static int value = 128;\n")])]),_._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[_._v("1")]),a("br")])]),a("p",[_._v("准备阶段设置的初始值为 "),a("code",[_._v("0")]),_._v(" 而不是 "),a("code",[_._v("128")]),_._v("。以下给出零值列表：")]),_._v(" "),a("table",[a("thead",[a("tr",[a("th",[_._v("数据类型")]),_._v(" "),a("th",[_._v("零值")])])]),_._v(" "),a("tbody",[a("tr",[a("td",[_._v("int")]),_._v(" "),a("td",[_._v("0")])]),_._v(" "),a("tr",[a("td",[_._v("long")]),_._v(" "),a("td",[_._v("0L")])]),_._v(" "),a("tr",[a("td",[_._v("short")]),_._v(" "),a("td",[_._v("0")])]),_._v(" "),a("tr",[a("td",[_._v("char")]),_._v(" "),a("td",[_._v("'\\u0000'")])]),_._v(" "),a("tr",[a("td",[_._v("byte")]),_._v(" "),a("td",[_._v("0")])]),_._v(" "),a("tr",[a("td",[_._v("boolean")]),_._v(" "),a("td",[_._v("false")])]),_._v(" "),a("tr",[a("td",[_._v("float")]),_._v(" "),a("td",[_._v("0.0f")])]),_._v(" "),a("tr",[a("td",[_._v("double")]),_._v(" "),a("td",[_._v("0.0d")])]),_._v(" "),a("tr",[a("td",[_._v("reference")]),_._v(" "),a("td",[_._v("null")])])])]),_._v(" "),a("p",[_._v("2）特殊情况：当类字段的字段属性表中存在 "),a("code",[_._v("ConstantValue")]),_._v(" 属性时，那么在准备阶段会将字段设置为 "),a("code",[_._v("ConstantValue")]),_._v(" 指定的值。比如将上一个类变量定义改为：")]),_._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[_._v("private static final int value = 128;\n")])]),_._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[_._v("1")]),a("br")])]),a("p",[_._v("添加了 final 关键字，编译时 Javac 会为 "),a("code",[_._v("value")]),_._v(" 生成 "),a("code",[_._v("ConstantValue")]),_._v(" 属性且指定为 "),a("code",[_._v("128")]),_._v("，那么准备阶段就会设置初始值为 "),a("code",[_._v("128")]),_._v("。")]),_._v(" "),a("h3",{attrs:{id:"_3-4-解析-resolution"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-解析-resolution"}},[_._v("#")]),_._v(" 3.4 解析（Resolution）")]),_._v(" "),a("p",[_._v("前面符号引用验证时提到过，解析阶段的目的是将常量池中的 "),a("code",[_._v("符号引用")]),_._v(" 替换为 "),a("code",[_._v("直接引用")]),_._v("。")]),_._v(" "),a("h3",{attrs:{id:"_3-5-初始化-initialization"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-初始化-initialization"}},[_._v("#")]),_._v(" 3.5 初始化（Initialization）")]),_._v(" "),a("p",[_._v("初始化目的是执行初始化方法 "),a("code",[_._v("<clinit>()")]),_._v("，是类加载的最后一个阶段，这一阶段才会真正开始执行 Java 程序中定义的代码。")]),_._v(" "),a("p",[a("code",[_._v("<clinit>()")]),_._v(" 方法是由编译器自动收集类中的所有类变量的赋值动作和静态语句块（即 static{} 块）中的语句合并产生的，不是类的构造函数 "),a("code",[_._v("<init>()")]),_._v("。")]),_._v(" "),a("p",[_._v("初始化过程有以下特点：")]),_._v(" "),a("ul",[a("li",[_._v("虚拟机会保证类的父类的 "),a("code",[_._v("<clinit>()")]),_._v(" 在子类 "),a("code",[_._v("<clinit>()")]),_._v(" 方法执行前完成，所以虚拟机中第一个执行的 "),a("code",[_._v("<clinit>()")]),_._v(" 方法一定是 "),a("code",[_._v("java.lang.Object")]),_._v(" 类的。")]),_._v(" "),a("li",[_._v("由于 "),a("code",[_._v("<clinit>()")]),_._v(" 的顺序固定，所以父类的静态语句块一定先于子类的静态语句块执行。")]),_._v(" "),a("li",[a("code",[_._v("<clinit>()")]),_._v(" 方法对于类和接口来说不是必须的，如果一个类没有静态语句块，也没有对类变量的赋值操作，那么编译器可能不会为其生成 "),a("code",[_._v("<clinit>()")]),_._v(" 方法。")]),_._v(" "),a("li",[_._v("接口中的 "),a("code",[_._v("<clinit>()")]),_._v(" 方法用于给变量赋值，且不需要先执行父接口的 "),a("code",[_._v("<clinit>()")]),_._v("，除非父接口定义的变量被接口使用；另外接口的实现类在初始化时也不会先执行接口的 "),a("code",[_._v("<clinit>()")]),_._v(" 方法，除非接口定义的变量被实现类使用。")]),_._v(" "),a("li",[_._v("虚拟机会保证 "),a("code",[_._v("<clinit>()")]),_._v(" 方法的执行是线程安全的，如果同时有多个线程初始化同一个类，那只有一个线程会执行 "),a("code",[_._v("<clinit>()")]),_._v(" 方法，其他线程都会阻塞。需要注意 "),a("code",[_._v("<clinit>()")]),_._v(" 只会执行一次，所以其他线程唤醒后不会再执行 "),a("code",[_._v("<clinit>()")]),_._v("。")])]),_._v(" "),a("h2",{attrs:{id:"_4-类加载器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-类加载器"}},[_._v("#")]),_._v(" 4. 类加载器")]),_._v(" "),a("p",[_._v("类加载的第一个阶段 "),a("code",[_._v("加载")]),_._v(" 中有一个动作：“通过一个类的全限定名来获取描述此类的二进制字节流”。这个动作被放到虚拟机外实现，可以让应用程序自己决定如何获取所需的类，实现这个动作的代码模块称为"),a("code",[_._v("类加载器")]),_._v("。")]),_._v(" "),a("h3",{attrs:{id:"_4-1-parents-delegation-model-双亲委派模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-parents-delegation-model-双亲委派模型"}},[_._v("#")]),_._v(" 4.1 Parents Delegation Model （双亲委派模型）")])])}),[],!1,null,null,null);v.default=e.exports}}]);