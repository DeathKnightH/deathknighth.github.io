(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{369:function(_,v,t){_.exports=t.p+"assets/img/bridge.drawio.3880ef6e.png"},454:function(_,v,t){"use strict";t.r(v);var a=t(44),e=Object(a.a)({},(function(){var _=this,v=_.$createElement,a=_._self._c||v;return a("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[a("h1",{attrs:{id:"桥接模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#桥接模式"}},[_._v("#")]),_._v(" 桥接模式")]),_._v(" "),a("h2",{attrs:{id:"_1-概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-概念"}},[_._v("#")]),_._v(" 1. 概念")]),_._v(" "),a("p",[_._v("Bridge 是一种结构型设计模式，将"),a("code",[_._v("抽象部分")]),_._v("和"),a("code",[_._v("实现部分")]),_._v("分离，可以分别扩展和修改。")]),_._v(" "),a("ul",[a("li",[_._v("又称 Handle and Body。")]),_._v(" "),a("li",[_._v("这里的"),a("code",[_._v("抽象部分")]),_._v(" 和 "),a("code",[_._v("实现部分")]),_._v("与语言中的抽象类和实现类无关，是业务层面的抽象和实现，对外暴露的是"),a("code",[_._v("抽象部分")]),_._v("（即 Handle），内部实际业务逻辑运行的是"),a("code",[_._v("实现部分")]),_._v("（即 Body）。")])]),_._v(" "),a("h2",{attrs:{id:"_2-解决的问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-解决的问题"}},[_._v("#")]),_._v(" 2. 解决的问题")]),_._v(" "),a("ul",[a("li",[a("p",[_._v("在抽象层次将一个类的多种独立变化维度关联起来，可以使各个维度独立扩展修改而不会互相影响。")])]),_._v(" "),a("li",[a("p",[_._v("减少多层继承导致的子类数量急剧增加。")])])]),_._v(" "),a("h2",{attrs:{id:"_3-类图示例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-类图示例"}},[_._v("#")]),_._v(" 3. 类图示例")]),_._v(" "),a("p",[a("img",{attrs:{src:t(369),alt:"bridge.drawio.png"}})]),_._v(" "),a("p",[_._v("类图中涉及5个角色，以遥控器（作为抽象部分）和电器（作为实现部分）为实例来参考说明：")]),_._v(" "),a("ul",[a("li",[_._v("client：业务代码，基本只和 Abstraction（抽象部分）交互。类比实例的操作者，操作遥控器。")]),_._v(" "),a("li",[_._v("Abstraction："),a("code",[_._v("抽象部分")]),_._v("的基础抽象，对外提供了基本的操作接口，类比实例的遥控器，对操作者提供基本操作：开机/关机。如果有扩展需要，可以 extends 出更多的 RefinedAbstraction。")]),_._v(" "),a("li",[_._v("RefinedAbstraction：扩展或者修改了"),a("code",[_._v("抽象部分")]),_._v("的逻辑，作用类似 Abstraction。类比实例的特化的具体遥控器，比如空调遥控器，扩展了升高温度/降低温度的操作。RefinedAbstraction 不是一定要有的，只有需要更多"),a("code",[_._v("抽象部分")]),_._v("变体的时候才这么做。")]),_._v(" "),a("li",[_._v("Implementation："),a("code",[_._v("实现部分")]),_._v("的顶层抽象，和"),a("code",[_._v("抽象部分")]),_._v("关联，通常是一个抽象类或者接口。类比实例的电器，只提供外观接口，不提供内部实现。"),a("code",[_._v("实现部分")]),_._v(" 一定有子类扩展：\n"),a("ul",[a("li",[_._v("ConcreteImplementations："),a("code",[_._v("实现部分")]),_._v("的子类实现，实现了具体的操作逻辑。类比实例的具体电器，比如空调，可以根据传入参数调整温度。")])])])]),_._v(" "),a("h2",{attrs:{id:"_4-适用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-适用场景"}},[_._v("#")]),_._v(" 4. 适用场景")]),_._v(" "),a("h3",{attrs:{id:"_4-1-实际工作场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-实际工作场景"}},[_._v("#")]),_._v(" 4.1 实际工作场景")]),_._v(" "),a("p",[_._v("桥接在实际工作中用起来比较复杂，也不是很常用，一般用的话在设计阶段就要考虑桥接模式了：")]),_._v(" "),a("ul",[a("li",[_._v("拆分一个拥有很多复杂功能的类，拆出抽象层次和实现层次。")]),_._v(" "),a("li",[_._v("如果在运行时需要切换不同的实现方法，也可以使用桥接。")])]),_._v(" "),a("h3",{attrs:{id:"_4-2-开源实例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-开源实例"}},[_._v("#")]),_._v(" 4.2 开源实例")]),_._v(" "),a("p",[_._v("JDK 中的 JDBC 实现就是很好的例子。")]),_._v(" "),a("h2",{attrs:{id:"_5-实现细节和技巧"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-实现细节和技巧"}},[_._v("#")]),_._v(" 5. 实现细节和技巧")]),_._v(" "),a("ul",[a("li",[_._v("设计桥接模式时一定要明确类中的独立维度，否则可能变成为了拆分而拆分，失去了实际意义。这些独立维度可能是：\n"),a("ul",[a("li",[_._v("抽象/平台")]),_._v(" "),a("li",[_._v("前端/后端")]),_._v(" "),a("li",[_._v("域/基础设施")]),_._v(" "),a("li",[_._v("接口/实现")])])]),_._v(" "),a("li",[a("code",[_._v("抽象部分")]),_._v("和"),a("code",[_._v("实现部分")]),_._v("的抽象层次接口很重要，需要在设计之初就考虑可以在所有平台上都执行的业务接口。")]),_._v(" "),a("li",[a("code",[_._v("实现部分")]),_._v("通常由业务代码在创建"),a("code",[_._v("抽象部分")]),_._v("时通过构造函数传参与"),a("code",[_._v("抽象部分")]),_._v("组装。")])]),_._v(" "),a("h2",{attrs:{id:"_6-优缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-优缺点"}},[_._v("#")]),_._v(" 6. 优缺点")]),_._v(" "),a("p",[_._v("优点：")]),_._v(" "),a("ul",[a("li",[_._v("符合单一原则。"),a("code",[_._v("抽象部分")]),_._v("专注处理高层逻辑，"),a("code",[_._v("实现部分")]),_._v("专注处理平台细节。")]),_._v(" "),a("li",[_._v("符合开闭原则。"),a("code",[_._v("抽象部分")]),_._v("和"),a("code",[_._v("实现部分")]),_._v("都能独立扩展，互相之间不会影响。")])]),_._v(" "),a("p",[_._v("缺点：")]),_._v(" "),a("ul",[a("li",[_._v("如果在设计之初就是高内聚的类，使用该模式会使代码变得非常复杂。")])]),_._v(" "),a("h2",{attrs:{id:"_7-与其他设计模式之间的关系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-与其他设计模式之间的关系"}},[_._v("#")]),_._v(" 7. 与其他设计模式之间的关系")])])}),[],!1,null,null,null);v.default=e.exports}}]);