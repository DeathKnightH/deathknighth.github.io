(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{366:function(_,v,a){"use strict";a.r(v);var s=a(44),t=Object(s.a)({},(function(){var _=this,v=_.$createElement,a=_._self._c||v;return a("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[a("h1",{attrs:{id:"位运算"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#位运算"}},[_._v("#")]),_._v(" 位运算")]),_._v(" "),a("h2",{attrs:{id:"_1-进制的基本概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-进制的基本概念"}},[_._v("#")]),_._v(" 1. 进制的基本概念")]),_._v(" "),a("h3",{attrs:{id:"_1-1-进位计数制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-进位计数制"}},[_._v("#")]),_._v(" 1.1 进位计数制")]),_._v(" "),a("p",[_._v("任何一种进位计数制都有一个基数，基数为 "),a("code",[_._v("X")]),_._v(" 的进位计数制称为 "),a("code",[_._v("X")]),_._v(" 进制，意味着每个数位上运算时都是逢 "),a("code",[_._v("X")]),_._v(" 进 "),a("code",[_._v("1")]),_._v("。")]),_._v(" "),a("h3",{attrs:{id:"_1-2-进制间转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-进制间转换"}},[_._v("#")]),_._v(" 1.2 进制间转换")]),_._v(" "),a("h4",{attrs:{id:"_1-2-1-非十进制转十进制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-1-非十进制转十进制"}},[_._v("#")]),_._v(" 1.2.1 非十进制转十进制")]),_._v(" "),a("p",[_._v("计算每个数位的加权和即可。\n例如将16进制数 "),a("code",[_._v("1A60.5")]),_._v(" 转换为十进制：")]),_._v(" "),a("blockquote",[a("p",[_._v("1A60.5 = 1 * 16^3 + 10 * 16^2 + 6 * 16^1 + 0 * 16^0 + 5 * 16^-1 =  6752.3125")])]),_._v(" "),a("h4",{attrs:{id:"_1-2-2-十进制转非十进制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-2-十进制转非十进制"}},[_._v("#")]),_._v(" 1.2.2 十进制转非十进制")]),_._v(" "),a("p",[_._v("一般将整数部分和小数部分分开计算。")]),_._v(" "),a("ul",[a("li",[a("p",[_._v("整数部分\n将整数部分每次除以 "),a("code",[_._v("X")]),_._v("，记录每次计算的余数，直到被除数变为0。然后反向遍历余数结果就可以得到 "),a("code",[_._v("X")]),_._v(" 进制数。")]),_._v(" "),a("p",[_._v("以 "),a("code",[_._v("2")]),_._v(" 进制为例，将十进制数 "),a("code",[_._v("100")]),_._v(" 转换为 "),a("code",[_._v("2")]),_._v(" 进制：")]),_._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[_._v("100 / 2 = 50 余 0\n50 / 2 = 25 余 0\n25 / 2 = 12 余 1\n12 / 2 = 6 余 0\n6 / 2 = 3 余 0\n3 / 2 = 1 余 1\n1 / 2 = 0 余 1\n")])]),_._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[_._v("1")]),a("br"),a("span",{staticClass:"line-number"},[_._v("2")]),a("br"),a("span",{staticClass:"line-number"},[_._v("3")]),a("br"),a("span",{staticClass:"line-number"},[_._v("4")]),a("br"),a("span",{staticClass:"line-number"},[_._v("5")]),a("br"),a("span",{staticClass:"line-number"},[_._v("6")]),a("br"),a("span",{staticClass:"line-number"},[_._v("7")]),a("br")])]),a("p",[_._v("得到 "),a("code",[_._v("2")]),_._v(" 进制表示为 "),a("code",[_._v("1100100")]),_._v("。")])]),_._v(" "),a("li",[a("p",[_._v("小数部分\n将小数部分每次乘以 "),a("code",[_._v("X")]),_._v(" 直到变为 0，记录每次结果的整数部分，正序遍历整数结果即可得到 "),a("code",[_._v("X")]),_._v(" 进制表示的小数。")]),_._v(" "),a("p",[_._v("以 "),a("code",[_._v("2")]),_._v(" 进制为例，将十进制数 "),a("code",[_._v("0.7235")]),_._v(" 转换为 "),a("code",[_._v("2")]),_._v(" 进制：")]),_._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[_._v("0.375 * 2 = 0.75 整数部分为 0\n0.75 * 2 = 1.5 整数部分为 1\n0.5 * 2 = 1 整数部分为1\n")])]),_._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[_._v("1")]),a("br"),a("span",{staticClass:"line-number"},[_._v("2")]),a("br"),a("span",{staticClass:"line-number"},[_._v("3")]),a("br")])]),a("p",[_._v("得到 "),a("code",[_._v("2")]),_._v(" 进制表示为 "),a("code",[_._v("0.011")]),_._v("。\n由于乘法的结果最后不一定总能将小数位清 0，所以很多时候一种进制下的有限小数转换为其他进制时会变成无限循环小数。例如十进制的 "),a("code",[_._v("0.9")]),_._v(" 转换为二进制结果为\n"),a("code",[_._v("0.1[1100]")]),_._v(" 后四位无限循环。")])])]),_._v(" "),a("h3",{attrs:{id:"_1-2-3-其他进制间的转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-3-其他进制间的转换"}},[_._v("#")]),_._v(" 1.2.3 其他进制间的转换")]),_._v(" "),a("p",[_._v("一般的思路是转换为十进制再转换到目标进制。")]),_._v(" "),a("p",[_._v("如果要转换的进制间存在对数关系，可以直接转换，比如二进制转换到八进制，因为 "),a("code",[_._v("8 = 2^3")]),_._v("，可以每3位一组计算得到对应位数上的值。例如二进制 "),a("code",[_._v("110010011")]),_._v(" 转换为八进制，先分组：")]),_._v(" "),a("blockquote",[a("p",[_._v("110|010|011")])]),_._v(" "),a("p",[_._v("再分别计算得到对应位数的八进制数字：")]),_._v(" "),a("blockquote",[a("p",[_._v("6|2|3")])]),_._v(" "),a("h2",{attrs:{id:"_2-java-中的二进制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-java-中的二进制"}},[_._v("#")]),_._v(" 2. java 中的二进制")]),_._v(" "),a("h2",{attrs:{id:"_3-位运算常用公式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-位运算常用公式"}},[_._v("#")]),_._v(" 3. 位运算常用公式")]),_._v(" "),a("ul",[a("li",[a("p",[_._v("计算只包含最后一位1的二进制数")]),_._v(" "),a("p",[_._v("x&-x")])]),_._v(" "),a("li",[a("p",[_._v("计算消除了最后一位1的二进制数")]),_._v(" "),a("p",[_._v("x&（x-1）")])])]),_._v(" "),a("ul",[a("li",[a("p",[_._v("计算最大公约数")]),_._v(" "),a("p",[_._v("x % y 一直递归下去，直到x＝＝y就是最大公约数。")])]),_._v(" "),a("li",[a("p",[_._v("查找重复数字")]),_._v(" "),a("p",[_._v("x^x == 0")]),_._v(" "),a("p",[_._v("x^x^x == x")]),_._v(" "),a("p",[_._v("奇数次异或可以得到原数字，偶数次异或得到0，可以用来区分重复次数分别为奇数和偶数的两组数字。")])])]),_._v(" "),a("h2",{attrs:{id:"_4-应用方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-应用方案"}},[_._v("#")]),_._v(" 4. 应用方案")]),_._v(" "),a("ul",[a("li",[a("p",[_._v("二进制压缩")]),_._v(" "),a("p",[_._v("当问题有一系列不同的元素只有有限种状态时，可以用二进制表示状态，称为二进制压缩。")])])]),_._v(" "),a("ul",[a("li",[a("p",[_._v("二进制归并")]),_._v(" "),a("p",[_._v("0x55555555")]),_._v(" "),a("p",[_._v("0x33333333")]),_._v(" "),a("p",[_._v("0x0f0f0f0f")]),_._v(" "),a("p",[_._v("0x00ff00ff")]),_._v(" "),a("p",[_._v("0x0000ffff")]),_._v(" "),a("p",[_._v("经常用于二进制位上的二路归并，可用于排序（比如二进制位反转），也可用于计数（比如计算二进制位中1的个数）")])]),_._v(" "),a("li",[a("p",[_._v("hash表和位运算配合可以大幅降低时间复杂度和空间复杂度")])]),_._v(" "),a("li",[a("p",[_._v("状态机用位运算可以在有限内存下表示更多状态")])])])])}),[],!1,null,null,null);v.default=t.exports}}]);