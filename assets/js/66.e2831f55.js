(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{434:function(_,t,a){"use strict";a.r(t);var v=a(44),r=Object(v.a)({},(function(){var _=this,t=_.$createElement,a=_._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[a("h1",{attrs:{id:"享元模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#享元模式"}},[_._v("#")]),_._v(" 享元模式")]),_._v(" "),a("h2",{attrs:{id:"_1-概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-概念"}},[_._v("#")]),_._v(" 1.概念")]),_._v(" "),a("p",[_._v("享元模式是一种结构型设计模式，又称缓存/Cache/Flyweight。利用共享的方式来支持大量细粒度的对象，这些对象内部的一部分状态是相同的。")]),_._v(" "),a("h2",{attrs:{id:"_2-意图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-意图"}},[_._v("#")]),_._v(" 2.意图")]),_._v(" "),a("p",[_._v("是一种将多个对象共用数据统一存储的方法论，通过：")]),_._v(" "),a("ul",[a("li",[_._v("将多种不同对象中共用的相同的部分抽取出来。这一部分形成的对象就是享元对象。")]),_._v(" "),a("li",[_._v("将不相同的部分抽取到享元的容器对象中。")])]),_._v(" "),a("p",[_._v("可以显著减少大量对象中重复成员带来的内存冗余。")]),_._v(" "),a("h2",{attrs:{id:"_3-类图示例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-类图示例"}},[_._v("#")]),_._v(" 3.类图示例")]),_._v(" "),a("h2",{attrs:{id:"_4-适用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-适用场景"}},[_._v("#")]),_._v(" 4.适用场景")]),_._v(" "),a("h3",{attrs:{id:"_4-1-业务场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-业务场景"}},[_._v("#")]),_._v(" 4.1 业务场景")]),_._v(" "),a("p",[_._v("业务中很多缓存的场景其实就是享元模式设计思想的体现：")]),_._v(" "),a("ul",[a("li",[_._v("比如计费的时候每个人都有不同的费率组合，但是单独的费率只有有限种且不会轻易修改，所以可以使用享元模式。\n"),a("ul",[a("li",[_._v("将费率对象作为享元，每个用户关联一个计费 model 类，这个类作为享元的容器。")])])])]),_._v(" "),a("h3",{attrs:{id:"_4-2-开源实例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-开源实例"}},[_._v("#")]),_._v(" 4.2 开源实例")]),_._v(" "),a("p",[_._v("jdk中有很多享元做缓存的实例，比如：")]),_._v(" "),a("ul",[a("li",[_._v("java.lang.Integer#valueOf(int) ，缓存 -128~127 的 Integer 对象")])]),_._v(" "),a("h2",{attrs:{id:"_5-实现细节和技巧"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-实现细节和技巧"}},[_._v("#")]),_._v(" 5.实现细节和技巧")]),_._v(" "),a("ul",[a("li",[_._v("抽取享元需要大量对象中有数据相同的重复部分。")]),_._v(" "),a("li",[_._v("享元的效果取决于实际场景，即：\n"),a("ul",[a("li",[_._v("同时有大量相似对象。")]),_._v(" "),a("li",[_._v("这些对象占用了大量内存。")]),_._v(" "),a("li",[_._v("这些对象有变化很少的部分数据。")])])]),_._v(" "),a("li",[_._v("通过享元工厂创建享元，这样就可以控制对象生成的数量。")])]),_._v(" "),a("h2",{attrs:{id:"_6-优缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-优缺点"}},[_._v("#")]),_._v(" 6.优缺点")]),_._v(" "),a("p",[_._v("优点：")]),_._v(" "),a("ul",[a("li",[_._v("节省内存空间。")])]),_._v(" "),a("p",[_._v("缺点：")]),_._v(" "),a("ul",[a("li",[_._v("代码组织变复杂。")]),_._v(" "),a("li",[_._v("执行效率可能会降低（用时间换空间）。")])]),_._v(" "),a("h2",{attrs:{id:"_7-与其他设计模式的关系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-与其他设计模式的关系"}},[_._v("#")]),_._v(" 7.与其他设计模式的关系")])])}),[],!1,null,null,null);t.default=r.exports}}]);