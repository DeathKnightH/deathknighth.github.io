(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{358:function(a,t,s){a.exports=s.p+"assets/img/Classlifecycle.drawio.28a78d45.png"},359:function(a,t,s){a.exports=s.p+"assets/img/Classloadprocess.drawio.dd29d369.png"},427:function(a,t,s){"use strict";s.r(t);var _=s(44),e=Object(_.a)({},(function(){var a=this,t=a.$createElement,_=a._self._c||t;return _("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[_("h1",{attrs:{id:"类加载机制"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#类加载机制"}},[a._v("#")]),a._v(" 类加载机制")]),a._v(" "),_("h2",{attrs:{id:"_1-概述"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-概述"}},[a._v("#")]),a._v(" 1. 概述")]),a._v(" "),_("p",[a._v("区别于其他在编译时需要进行连接工作的语言，Java 的类型加载、连接、初始化过程都是在运行时完成的。")]),a._v(" "),_("p",[a._v("虚拟机把描述类的数据从 class 文件（不一定是磁盘文件，只要是能输入的二进制流都行）加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的 Java 类型，这就是类加载。")]),a._v(" "),_("p",[a._v("在虚拟机中类的生命周期如下：\n"),_("img",{attrs:{src:s(358),alt:"image-class-lifecycle"}})]),a._v(" "),_("h2",{attrs:{id:"_2-类加载的时机"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-类加载的时机"}},[a._v("#")]),a._v(" 2. 类加载的时机")]),a._v(" "),_("p",[a._v("虚拟机规范没有规定 "),_("code",[a._v("Loading")]),a._v(" 阶段执行的时机，但是强制规定了 "),_("code",[a._v("Initialization")]),a._v(" 阶段的执行时机，即有且仅有在 6 种主动引用类的情况下，必须进行 "),_("code",[a._v("Initialization")]),a._v("。")]),a._v(" "),_("p",[a._v("可以使用：")]),a._v(" "),_("blockquote",[_("p",[a._v("-XX:+TraceClassLoading")])]),a._v(" "),_("p",[a._v("参数来观察类加载的实际情况。也可以通过在类的静态域添加 print 方法来判断该类是否执行了初始化。")]),a._v(" "),_("h3",{attrs:{id:"_2-1-主动引用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-主动引用"}},[a._v("#")]),a._v(" 2.1 主动引用")]),a._v(" "),_("p",[a._v("主动引用在规范中有且仅有 6 种情况：")]),a._v(" "),_("ul",[_("li",[a._v("遇到 new、getstatic、putstatic、invokestatic 这 4 条字节码指令的任意一条时，如果目标类没有进行初始化，则会先触发初始化。")]),a._v(" "),_("li",[a._v("使用 java.lang.reflect 包的方法对目标类进行反射调用时，如果目标类没有进行初始化，则会先触发初始化。")]),a._v(" "),_("li",[a._v("进行一个类的初始化时，如果该类的父类没有进行初始化，则会先触发其父类的初始化。")]),a._v(" "),_("li",[a._v("虚拟机启动时，用户指定执行的主类（即 main 方法所在的类）会先触发初始化。")]),a._v(" "),_("li",[a._v("使用动态语言支持时，MethodHandle 和 VarHandle 调用前需要使用 "),_("code",[a._v("findeStaticVarHandle")]),a._v(" 来初始化目标类。")]),a._v(" "),_("li",[a._v("JDK 8 之后如果在接口中定义了 default 方法，在其实现类初始化之前需要先对接口进行初始化。")])]),a._v(" "),_("h3",{attrs:{id:"_2-2-被动引用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-被动引用"}},[a._v("#")]),a._v(" 2.2 被动引用")]),a._v(" "),_("p",[a._v("除了以上 6 中强制初始化的情况，其余情况都是被动引用，不用强制执行初始化。")]),a._v(" "),_("h2",{attrs:{id:"_3-类加载过程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-类加载过程"}},[a._v("#")]),a._v(" 3. 类加载过程")]),a._v(" "),_("p",[a._v("类加载总体分为 5 个阶段，加载、验证、准备、解析、初始化。\n"),_("img",{attrs:{src:s(359),alt:"image-class-lifecycle"}})])])}),[],!1,null,null,null);t.default=e.exports}}]);