(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{371:function(t,a,_){t.exports=_.p+"assets/img/chainofresponsibility.drawio.2ae184cd.png"},447:function(t,a,_){"use strict";_.r(a);var r=_(44),s=Object(r.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"责任链模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#责任链模式"}},[t._v("#")]),t._v(" 责任链模式")]),t._v(" "),r("h2",{attrs:{id:"_1-概念"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-概念"}},[t._v("#")]),t._v(" 1.概念")]),t._v(" "),r("p",[t._v("责任链模式是一种行为设计模式，又称命令链/chain of responsibility，将请求沿链传递，链上的每个成员都能处理请求。")]),t._v(" "),r("h2",{attrs:{id:"_2-意图"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-意图"}},[t._v("#")]),t._v(" 2.意图")]),t._v(" "),r("p",[t._v("将请求的处理者连成一个链条，后续逻辑可以分为两种模式：")]),t._v(" "),r("ul",[r("li",[t._v("处理者判断是否是自己处理的请求，不是就原样传递给下一个处理者，如果是就自己拦截下来处理。类似 servlet filter。")]),t._v(" "),r("li",[t._v("每个处理者都处理一遍请求，不符合要求就中断请求直接返回。类似校验器类。")])]),t._v(" "),r("h2",{attrs:{id:"_3-类图示例"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-类图示例"}},[t._v("#")]),t._v(" 3.类图示例")]),t._v(" "),r("p",[r("img",{attrs:{src:_(371),alt:"COR"}})]),t._v(" "),r("p",[t._v("图中 BaseHandler 是可选的，为了代码结构简洁可以不使用，直接从 Handler 接口实现具体的处理器。")]),t._v(" "),r("h2",{attrs:{id:"_4-适用场景"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-适用场景"}},[t._v("#")]),t._v(" 4.适用场景")]),t._v(" "),r("h3",{attrs:{id:"_4-1-业务场景"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-业务场景"}},[t._v("#")]),t._v(" 4.1 业务场景")]),t._v(" "),r("ul",[r("li",[t._v("web 开发中常见的 filter/validator 都是责任链模式的实现。")]),t._v(" "),r("li",[t._v("之前做计费项目时，计费的前置条件/预处理参数也是使用责任链模式实现的：\n"),r("ul",[r("li",[t._v("初始的计算参数对象通过条件处理器，将系统/区域/分公司配置的额外条件和参数整合进去。")]),t._v(" "),r("li",[t._v("这些配置的额外条件和参数在代码中都体现为实现了 handler 接口的具体处理器，在运行时通过回调函数注册到责任链中。")])])])]),t._v(" "),r("h3",{attrs:{id:"_4-2-开源实例"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-开源实例"}},[t._v("#")]),t._v(" 4.2 开源实例")]),t._v(" "),r("ul",[r("li",[t._v("javax.servlet.Filter#doFilter()")]),t._v(" "),r("li",[t._v("java.util.logging.Logger#log()")])]),t._v(" "),r("h2",{attrs:{id:"_5-实现细节与技巧"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5-实现细节与技巧"}},[t._v("#")]),t._v(" 5.实现细节与技巧")]),t._v(" "),r("ul",[r("li",[t._v("如果多个处理器存在重复代码，可以抽象成一个基础处理器，再继承实现不同的具体处理器。")]),t._v(" "),r("li",[t._v("每个处理器都可以决定是否继续传递。")]),t._v(" "),r("li",[t._v("责任链在代码中通常是可以运行时组装的，可以提供一些工厂类用于创建处理器。")])]),t._v(" "),r("h2",{attrs:{id:"_6-优缺点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_6-优缺点"}},[t._v("#")]),t._v(" 6.优缺点")]),t._v(" "),r("p",[t._v("优点：")]),t._v(" "),r("ul",[r("li",[t._v("符合开闭原则。")]),t._v(" "),r("li",[t._v("符合单一原则，一个处理器只提供一个功能。")]),t._v(" "),r("li",[t._v("可以忽略处理器的调用顺序。")])]),t._v(" "),r("p",[t._v("缺点：")]),t._v(" "),r("ul",[r("li",[t._v("如果有的处理器实现有缺陷，可能导致请求未被完全处理就返回。")])]),t._v(" "),r("h2",{attrs:{id:"_7-与其他设计模式的关系"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_7-与其他设计模式的关系"}},[t._v("#")]),t._v(" 7.与其他设计模式的关系")])])}),[],!1,null,null,null);a.default=s.exports}}]);