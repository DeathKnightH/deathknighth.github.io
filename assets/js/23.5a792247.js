(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{390:function(a,s,e){"use strict";e.r(s);var t=e(44),v=Object(t.a)({},(function(){var a=this,s=a.$createElement,e=a._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"位运算"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#位运算"}},[a._v("#")]),a._v(" 位运算")]),a._v(" "),e("h2",{attrs:{id:"_1-进制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-进制"}},[a._v("#")]),a._v(" 1. 进制")]),a._v(" "),e("h3",{attrs:{id:"_1-1-进制的基本概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-进制的基本概念"}},[a._v("#")]),a._v(" 1.1 进制的基本概念")]),a._v(" "),e("h4",{attrs:{id:"_1-1-1-进位计数制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-1-进位计数制"}},[a._v("#")]),a._v(" 1.1.1 进位计数制")]),a._v(" "),e("p",[a._v("任何一种进位计数制都有一个基数，基数为 "),e("code",[a._v("X")]),a._v(" 的进位计数制称为 "),e("code",[a._v("X")]),a._v(" 进制，意味着每个数位上运算时都是逢 "),e("code",[a._v("X")]),a._v(" 进 "),e("code",[a._v("1")]),a._v("。")]),a._v(" "),e("h4",{attrs:{id:"_1-1-2-进制间转换"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-2-进制间转换"}},[a._v("#")]),a._v(" 1.1.2 进制间转换")]),a._v(" "),e("h5",{attrs:{id:"非十进制转十进制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#非十进制转十进制"}},[a._v("#")]),a._v(" 非十进制转十进制")]),a._v(" "),e("p",[a._v("计算每个数位的加权和即可。\n例如将16进制数 "),e("code",[a._v("1A60.5")]),a._v(" 转换为十进制：")]),a._v(" "),e("blockquote",[e("p",[a._v("1A60.5 = 1 * 16^3 + 10 * 16^2 + 6 * 16^1 + 0 * 16^0 + 5 * 16^-1 =  6752.3125")])]),a._v(" "),e("h5",{attrs:{id:"十进制转非十进制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#十进制转非十进制"}},[a._v("#")]),a._v(" 十进制转非十进制")]),a._v(" "),e("p",[a._v("一般将整数部分和小数部分分开计算。")]),a._v(" "),e("ul",[e("li",[e("p",[a._v("整数部分\n将整数部分每次除以 "),e("code",[a._v("X")]),a._v("，记录每次计算的余数，直到被除数变为0。然后反向遍历余数结果就可以得到 "),e("code",[a._v("X")]),a._v(" 进制数。")]),a._v(" "),e("p",[a._v("以 "),e("code",[a._v("2")]),a._v(" 进制为例，将十进制数 "),e("code",[a._v("100")]),a._v(" 转换为 "),e("code",[a._v("2")]),a._v(" 进制：")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("100 / 2 = 50 余 0\n50 / 2 = 25 余 0\n25 / 2 = 12 余 1\n12 / 2 = 6 余 0\n6 / 2 = 3 余 0\n3 / 2 = 1 余 1\n1 / 2 = 0 余 1\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br")])]),e("p",[a._v("得到 "),e("code",[a._v("2")]),a._v(" 进制表示为 "),e("code",[a._v("1100100")]),a._v("。")])]),a._v(" "),e("li",[e("p",[a._v("小数部分\n将小数部分每次乘以 "),e("code",[a._v("X")]),a._v(" 直到变为 0，记录每次结果的整数部分，正序遍历整数结果即可得到 "),e("code",[a._v("X")]),a._v(" 进制表示的小数。")]),a._v(" "),e("p",[a._v("以 "),e("code",[a._v("2")]),a._v(" 进制为例，将十进制数 "),e("code",[a._v("0.7235")]),a._v(" 转换为 "),e("code",[a._v("2")]),a._v(" 进制：")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("0.375 * 2 = 0.75 整数部分为 0\n0.75 * 2 = 1.5 整数部分为 1\n0.5 * 2 = 1 整数部分为1\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br")])]),e("p",[a._v("得到 "),e("code",[a._v("2")]),a._v(" 进制表示为 "),e("code",[a._v("0.011")]),a._v("。\n由于乘法的结果最后不一定总能将小数位清 0，所以很多时候一种进制下的有限小数转换为其他进制时会变成无限循环小数。例如十进制的 "),e("code",[a._v("0.9")]),a._v(" 转换为二进制结果为\n"),e("code",[a._v("0.1[1100]")]),a._v(" 后四位无限循环。")])])]),a._v(" "),e("h5",{attrs:{id:"其他进制间的转换"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#其他进制间的转换"}},[a._v("#")]),a._v(" 其他进制间的转换")]),a._v(" "),e("p",[a._v("一般的思路是转换为十进制再转换到目标进制。")]),a._v(" "),e("p",[a._v("如果要转换的进制间存在对数关系，可以直接转换，比如二进制转换到八进制，因为 "),e("code",[a._v("8 = 2^3")]),a._v("，可以每3位一组计算得到对应位数上的值。例如二进制 "),e("code",[a._v("110010011")]),a._v(" 转换为八进制，先分组：")]),a._v(" "),e("blockquote",[e("p",[a._v("110|010|011")])]),a._v(" "),e("p",[a._v("再分别计算得到对应位数的八进制数字：")]),a._v(" "),e("blockquote",[e("p",[a._v("6|2|3")])]),a._v(" "),e("h3",{attrs:{id:"_1-2-java-中的二进制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-java-中的二进制"}},[a._v("#")]),a._v(" 1.2 java 中的二进制")]),a._v(" "),e("h4",{attrs:{id:"_1-2-1-原码和反码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-1-原码和反码"}},[a._v("#")]),a._v(" 1.2.1 原码和反码")]),a._v(" "),e("p",[a._v("原码由两部分组成：")]),a._v(" "),e("ul",[e("li",[a._v("符号位，最高的一位，"),e("code",[a._v("0")]),a._v(" 表示正数，"),e("code",[a._v("1")]),a._v(" 表示负数。")]),a._v(" "),e("li",[a._v("数值，其余位置正常表示一个数的真值。")])]),a._v(" "),e("p",[a._v("反码则是在表示负数时将除符号位以外的位置取反。")]),a._v(" "),e("p",[a._v("例如：")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("+11 的原码是 0000 0000 0000 0000 0000 0000 0000 1011\n    反码也是 0000 0000 0000 0000 0000 0000 0000 1011\n-11 的原码是 1000 0000 0000 0000 0000 0000 0000 1011\n    反码则是 1111 1111 1111 1111 1111 1111 1111 0100\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br")])]),e("h4",{attrs:{id:"_1-2-2-补码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-2-补码"}},[a._v("#")]),a._v(" 1.2.2 补码")]),a._v(" "),e("p",[a._v("补码中 "),e("code",[a._v("0")]),a._v("/正数表示与原码和反码一致，负数是在反码的基础上加1得到的。\n例如：")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("-11 的原码是 1000 0000 0000 0000 0000 0000 0000 1011\n    反码则是 1111 1111 1111 1111 1111 1111 1111 0100\n    补码则是 1111 1111 1111 1111 1111 1111 1111 0101\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br")])]),e("p",[a._v("这样做有两个好处：")]),a._v(" "),e("ul",[e("li",[a._v("不会有 "),e("code",[a._v("+0")]),a._v(" 和 "),e("code",[a._v("-0")]),a._v(", "),e("code",[a._v("0")]),a._v("统一属于正数表示。")]),a._v(" "),e("li",[a._v("减法运算可以直接将一个正数和一个负数对应的位数相加即可，不用采用更复杂的逻辑判断。")])]),a._v(" "),e("p",[a._v("因此 java 中的整形采用补码进行表示。")]),a._v(" "),e("h4",{attrs:{id:"_1-2-3-无符号整形"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-3-无符号整形"}},[a._v("#")]),a._v(" 1.2.3 无符号整形")]),a._v(" "),e("p",[a._v("java 语言本身不支持无符号整形。")]),a._v(" "),e("p",[a._v("但是 jdk 8 之后添加了很多无符号整形的 API 来执行无符号的一些操作，这些 API 中使用一个正常的 int 表示一个无符号整形，使用诸如 "),e("code",[a._v("compareUnsigned")]),a._v("/"),e("code",[a._v("divideUnsigned")]),a._v(" 之类的 API 进行无符号的计算/比较。")]),a._v(" "),e("h2",{attrs:{id:"_2-位运算"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-位运算"}},[a._v("#")]),a._v(" 2. 位运算")]),a._v(" "),e("h3",{attrs:{id:"_2-1-基本位运算"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-基本位运算"}},[a._v("#")]),a._v(" 2.1 基本位运算")]),a._v(" "),e("h4",{attrs:{id:"与"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#与"}},[a._v("#")]),a._v(" 与")]),a._v(" "),e("p",[a._v("运算符："),e("code",[a._v("&")])]),a._v(" "),e("p",[a._v("规则：对每个二进制位，当两个数对应的位均为 1 时，结果为 1，否则为 0.")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("0 & 0 == 0\n0 & 1 == 0\n1 & 0 == 0\n1 & 1 == 1\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br")])]),e("h4",{attrs:{id:"或"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#或"}},[a._v("#")]),a._v(" 或")]),a._v(" "),e("p",[a._v("运算符："),e("code",[a._v("|")])]),a._v(" "),e("p",[a._v("规则：对每个二进制位，当两个数对应的位均为 0 时，结果为 0，否则为 1.")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("0 | 0 == 0\n0 | 1 == 1\n1 | 0 == 1\n1 | 1 == 0\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br")])]),e("h4",{attrs:{id:"异或"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#异或"}},[a._v("#")]),a._v(" 异或")]),a._v(" "),e("p",[a._v("运算符："),e("code",[a._v("^")])]),a._v(" "),e("p",[a._v("规则：对每个二进制位，当两个数相同时，结果为 0，否则为 1.")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("0 ^ 0 == 0\n0 ^ 1 == 1\n1 ^ 0 == 1\n1 ^ 1 == 0\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br")])]),e("h4",{attrs:{id:"取反"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#取反"}},[a._v("#")]),a._v(" 取反")]),a._v(" "),e("p",[a._v("运算符："),e("code",[a._v("~")])]),a._v(" "),e("p",[a._v("规则：对每个二进制位进行取反操作，0 变 1,1 变 0.")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("~0 == 1\n~1 == 0\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br")])]),e("h4",{attrs:{id:"位移"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#位移"}},[a._v("#")]),a._v(" 位移")]),a._v(" "),e("p",[a._v("算术位移：带符号的位移。左移时，高位丢弃，低位补0。右移时，低位丢弃，高位补最高位")]),a._v(" "),e("p",[a._v("java 中对应的运算符是：")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("<< // 算术左移\n>> // 算术右移\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br")])]),e("p",[a._v("示例：")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("1 << 1 == 2 // 0000 0000 0000 0000 0000 0000 0000 0001 左移1位后为 0000 0000 0000 0000 0000 0000 0000 0010 高位丢弃，低位补0\n-1 << 1 == -2 // 1111 1111 1111 1111 1111 1111 1111 1111 左移1位后为 1111 1111 1111 1111 1111 1111 1111 1110 高位丢弃，低位补0\n-1 >> 2 == -1 // 1111 1111 1111 1111 1111 1111 1111 1111 算术右移2位后为 1111 1111 1111 1111 1111 1111 1111 1111 低位丢弃，高位补最高位即1\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br")])]),e("p",[a._v("逻辑位移：由于逻辑左移和算术左移是一样的，只讨论逻辑右移。不带符号的位移，直接对所有二进制位进行右移，高位补 0。java 中对应的运算符是：")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v(">>> // 逻辑右移\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br")])]),e("p",[a._v("示例：")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("-1 >>> 1 == 2147483647 // 1111 1111 1111 1111 1111 1111 1111 1110 进行逻辑右移1位后为 0111 1111 1111 1111 1111 1111 1111 1111 低位丢弃，高位补0\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br")])]),e("h3",{attrs:{id:"_2-2-性质"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-性质"}},[a._v("#")]),a._v(" 2.2 性质")]),a._v(" "),e("ul",[e("li",[a._v("幂等律：")])]),a._v(" "),e("blockquote",[e("p",[a._v("a & a = a\na | a = a")])]),a._v(" "),e("ul",[e("li",[a._v("交换律：")])]),a._v(" "),e("blockquote",[e("p",[a._v("a & b = b & a\na | b = b | a\na ^ b = b ^ a")])]),a._v(" "),e("ul",[e("li",[a._v("结合律：")])]),a._v(" "),e("blockquote",[e("p",[a._v("(a & b)& c = a &(b & c)\n(a | b)| c = a |(b | c)\n(a ^ b)^ c = a ^(b ^ c)")])]),a._v(" "),e("ul",[e("li",[a._v("分配律：")])]),a._v(" "),e("blockquote",[e("p",[a._v("(a & b)| c = (a | c)&(b | c)\n(a | b)& c = (a & c)|(b & c)\n(a ^ b)& c = (a & c)^(b & c)")])]),a._v(" "),e("ul",[e("li",[a._v("德摩根律：")])]),a._v(" "),e("blockquote",[e("p",[a._v("~(a & b) = (~a) | (~b)\n~(a | b) = (~a) & (~b)")])]),a._v(" "),e("ul",[e("li",[a._v("针对补码的取反")])]),a._v(" "),e("blockquote",[e("p",[a._v("-a = ~(a - 1)")])]),a._v(" "),e("p",[a._v("例如：")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("-1 == ~0\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br")])]),e("h3",{attrs:{id:"_2-3-位运算常用公式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-位运算常用公式"}},[a._v("#")]),a._v(" 2.3 位运算常用公式")]),a._v(" "),e("ul",[e("li",[e("p",[a._v("计算只包含最后一位1的二进制数")]),a._v(" "),e("p",[a._v("x&-x")])]),a._v(" "),e("li",[e("p",[a._v("计算消除了最后一位1的二进制数")]),a._v(" "),e("p",[a._v("x&（x-1）")])])]),a._v(" "),e("ul",[e("li",[e("p",[a._v("计算最大公约数")]),a._v(" "),e("p",[a._v("x % y 一直递归下去，直到x＝＝y就是最大公约数。")])]),a._v(" "),e("li",[e("p",[a._v("查找重复数字")]),a._v(" "),e("p",[a._v("x^x == 0")]),a._v(" "),e("p",[a._v("x^x^x == x")]),a._v(" "),e("p",[a._v("奇数次异或可以得到原数字，偶数次异或得到0，可以用来区分重复次数分别为奇数和偶数的两组数字。")])])]),a._v(" "),e("h2",{attrs:{id:"_4-应用方案"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-应用方案"}},[a._v("#")]),a._v(" 4. 应用方案")]),a._v(" "),e("ul",[e("li",[e("p",[a._v("二进制压缩")]),a._v(" "),e("p",[a._v("当问题有一系列不同的元素只有有限种状态时，可以用"),e("strong",[a._v("一个数")]),a._v("的二进制表示状态，称为二进制压缩。")]),a._v(" "),e("p",[a._v("例如表示10个物体，每个物体有两种状态，拿或者不拿，则可以用一个 10 位的二进制数表示当前选择的状态。")])])]),a._v(" "),e("ul",[e("li",[e("p",[a._v("二进制归并")]),a._v(" "),e("p",[a._v("0x55555555")]),a._v(" "),e("p",[a._v("0x33333333")]),a._v(" "),e("p",[a._v("0x0f0f0f0f")]),a._v(" "),e("p",[a._v("0x00ff00ff")]),a._v(" "),e("p",[a._v("0x0000ffff")]),a._v(" "),e("p",[a._v("经常用于二进制位上的二路归并，可用于排序（比如二进制位反转），也可用于计数（比如计算二进制位中1的个数）。例如：")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("int n;\nn = (n & 0x55555555) + ((n >>> 1)  & 0x55555555); // 计算每 2 位的 1 的个数和，结果存在原数中，因为每 2 位的 1 的个数不超过 2，所以用 2 个二进制位刚好能存\nn = (n & 0x33333333) + ((n >>> 2)  & 0x33333333); // 基于上一步的结果计算每 4 位的 1 的个数和，结果存在原数中，因为每 4 位的 1 的个数不超过 4，所以用 4 个二进制位肯定能存下\nn = (n & 0x0f0f0f0f) + ((n >>> 4)  & 0x0f0f0f0f); // 基于上一步的结果计算每 8 位的 1 的个数和，结果存在原数中，因为每 8 位的 1 的个数不超过 8，所以用 8 个二进制位肯定能存下\nn = (n & 0x00ff00ff) + ((n >>> 8)  & 0x00ff00ff); // 基于上一步的结果计算每 16 位的 1 的个数和，结果存在原数中，因为每 16 位的 1 的个数不超过 16，所以用 16 个二进制位肯定能存下\nn = (n & 0x0000ffff) + ((n >>> 16) & 0x0000ffff); // 基于上一步的结果计算每 32 位的 1 的个数和，结果存在原数中，因为每 32 位的 1 的个数不超过 32，所以用 32 个二进制位肯定能存下\nreturn n; //到这里一个 32 位二进制的数中 1 的个数就已经统计完成了\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br")])])]),a._v(" "),e("li",[e("p",[a._v("hash表和位运算配合可以大幅降低时间复杂度和空间复杂度")])])]),a._v(" "),e("p",[a._v("比如用二进制压缩后的 mask 作为 key，而符合 mask 状态的条件作为 value 组成一个 hash 表。")]),a._v(" "),e("ul",[e("li",[a._v("状态机用位运算可以在有限内存下表示更多状态")])]),a._v(" "),e("h2",{attrs:{id:"_5-习题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-习题"}},[a._v("#")]),a._v(" 5. 习题")]),a._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://leetcode-cn.com/problems/single-number/",target:"_blank",rel:"noopener noreferrer"}},[a._v("136. 只出现一次的数字"),e("OutboundLink")],1)]),a._v(" "),e("li",[e("a",{attrs:{href:"https://leetcode-cn.com/problems/reverse-bits/",target:"_blank",rel:"noopener noreferrer"}},[a._v("190. 颠倒二进制位"),e("OutboundLink")],1)]),a._v(" "),e("li",[e("a",{attrs:{href:"https://leetcode-cn.com/problems/single-number-ii/",target:"_blank",rel:"noopener noreferrer"}},[a._v("137. 只出现一次的数字 II"),e("OutboundLink")],1)]),a._v(" "),e("li",[e("a",{attrs:{href:"https://leetcode-cn.com/problems/single-number-iii/",target:"_blank",rel:"noopener noreferrer"}},[a._v("260. 只出现一次的数字 III"),e("OutboundLink")],1)]),a._v(" "),e("li",[e("a",{attrs:{href:"https://leetcode-cn.com/problems/power-of-two/",target:"_blank",rel:"noopener noreferrer"}},[a._v("231. 2 的幂"),e("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=v.exports}}]);