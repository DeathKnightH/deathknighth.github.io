(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{379:function(t,a,s){"use strict";s.r(a);var n=s(44),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"冒泡排序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#冒泡排序"}},[t._v("#")]),t._v(" 冒泡排序")]),t._v(" "),s("p",[t._v("冒泡排序（Bubble Sort）是一种简单的排序算法，在执行过程中，较小（大）的元素像'气泡'一样'浮'到序列顶端，所以称为冒泡排序。")]),t._v(" "),s("h2",{attrs:{id:"_1-原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-原理"}},[t._v("#")]),t._v(" 1. 原理")]),t._v(" "),s("p",[t._v("每次比较相邻两个元素，如果前面的元素与后面的元素不满足排序条件，就将相邻的两个元素互换。直到一次扫描没有元素需要互换，排序就完成了。")]),t._v(" "),s("p",[t._v("最坏情况下，冒泡排序需要扫描 "),s("code",[t._v("n - 1")]),t._v(" 遍序列才能完成排序。")]),t._v(" "),s("h2",{attrs:{id:"_2-性质"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-性质"}},[t._v("#")]),t._v(" 2. 性质")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("性质")]),t._v(" "),s("th"),t._v(" "),s("th",[t._v("描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("稳定性")]),t._v(" "),s("td",[t._v("稳定")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[t._v("最坏时间复杂度")]),t._v(" "),s("td",[t._v("O(n^2)")]),t._v(" "),s("td",[t._v("最坏情况需要执行 (n - 1)*n/2 次交换操作")])]),t._v(" "),s("tr",[s("td",[t._v("最好时间复杂度")]),t._v(" "),s("td",[t._v("O(n)")]),t._v(" "),s("td",[t._v("完全有序的序列只需要扫描一次全序列就可以完成排序")])]),t._v(" "),s("tr",[s("td",[t._v("平均时间复杂度")]),t._v(" "),s("td",[t._v("O(n^2)")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[t._v("空间复杂度")]),t._v(" "),s("td",[t._v("O(1)")]),t._v(" "),s("td",[t._v("可以只用 1 个额外空间存储交换时的临时元素，某些特殊情况甚至可以不使用额外空间")])])])]),t._v(" "),s("h2",{attrs:{id:"_3-伪代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-伪代码"}},[t._v("#")]),t._v(" 3. 伪代码")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("Input:一个包含n个可排序元素的序列 A[n]。\nOutput:把输入序列按非递减排序的序列 A[n]。\nMethod:\nflag <- true\nwhile flag\n  flag <- false\n  for i <- 0 to n - 1\n    if A[i] > A[i + 1]\n      flag <- true\n      Swap A[i] And A[i + 1]\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br")])]),s("h2",{attrs:{id:"_4-java实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-java实现"}},[t._v("#")]),t._v(" 4. Java实现")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code")]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"})])])}),[],!1,null,null,null);a.default=e.exports}}]);